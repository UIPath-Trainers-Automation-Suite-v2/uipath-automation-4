diff --git a/.gitignore b/.gitignore
index cc8464d..7179d18 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,18 +1,14 @@
+appsettings.json
 
 # Created by https://www.toptal.com/developers/gitignore/api/csharp,vscode,visualstudiocode
 # Edit at https://www.toptal.com/developers/gitignore?templates=csharp,vscode,visualstudiocode
-# all app settings
-appsettings.json
+
 ### Csharp ###
 ## Ignore Visual Studio temporary files, build results, and
 ## files generated by popular Visual Studio add-ons.
 ##
 ## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
 
-# Migrations output folder
-[Mi]grations/
-
-
 # User-specific files
 *.rsuser
 *.suo
@@ -377,4 +373,4 @@ MigrationBackup/
 
 ### vscode ###
 
-# End of https://www.toptal.com/developers/gitignore/api/csharp,vscode,visualstudiocode
\ No newline at end of file
+# End of https://www.toptal.com/developers/gitignore/api/csharp,vscode,visualstudiocode
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..98f227a
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2020 201019-UiPath
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/README.md b/README.md
index 77d9fd8..78bc52e 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# GibsonJulie-Project0
\ No newline at end of file
+# KumarShalei-Project0
\ No newline at end of file
diff --git a/SoilMates/SoilMates.sln b/SoilMates/SoilMates.sln
deleted file mode 100644
index 9d6ec35..0000000
--- a/SoilMates/SoilMates.sln
+++ /dev/null
@@ -1,90 +0,0 @@
-ï»¿
-Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio 15
-VisualStudioVersion = 15.0.26124.0
-MinimumVisualStudioVersion = 15.0.26124.0
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SoilMatesUI", "SoilMatesUI\SoilMatesUI.csproj", "{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}"
-EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SoilMatesLib", "SoilMatesLib\SoilMatesLib.csproj", "{EC4023C8-0AE9-476C-A6E5-E710D7727E28}"
-EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SoilMatesDB", "SoilMatesDB\SoilMatesDB.csproj", "{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}"
-EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SoilMatesTest", "SoilMatesTest\SoilMatesTest.csproj", "{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}"
-EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SoilMatesBL", "SoilMatesBL\SoilMatesBL.csproj", "{039221D7-09E7-443E-9A03-0497EDB60462}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|Any CPU = Debug|Any CPU
-		Debug|x64 = Debug|x64
-		Debug|x86 = Debug|x86
-		Release|Any CPU = Release|Any CPU
-		Release|x64 = Release|x64
-		Release|x86 = Release|x86
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Debug|x64.Build.0 = Debug|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Debug|x86.Build.0 = Debug|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Release|Any CPU.Build.0 = Release|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Release|x64.ActiveCfg = Release|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Release|x64.Build.0 = Release|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Release|x86.ActiveCfg = Release|Any CPU
-		{8E177F95-6A6E-4F83-BEE8-50A79B7A2AE2}.Release|x86.Build.0 = Release|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Debug|x64.Build.0 = Debug|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Debug|x86.Build.0 = Debug|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Release|Any CPU.Build.0 = Release|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Release|x64.ActiveCfg = Release|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Release|x64.Build.0 = Release|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Release|x86.ActiveCfg = Release|Any CPU
-		{EC4023C8-0AE9-476C-A6E5-E710D7727E28}.Release|x86.Build.0 = Release|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Debug|x64.Build.0 = Debug|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Debug|x86.Build.0 = Debug|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Release|Any CPU.Build.0 = Release|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Release|x64.ActiveCfg = Release|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Release|x64.Build.0 = Release|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Release|x86.ActiveCfg = Release|Any CPU
-		{5869BADC-CCAC-4FF1-AE89-204D85AE34E5}.Release|x86.Build.0 = Release|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Debug|x64.Build.0 = Debug|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Debug|x86.Build.0 = Debug|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Release|Any CPU.Build.0 = Release|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Release|x64.ActiveCfg = Release|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Release|x64.Build.0 = Release|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Release|x86.ActiveCfg = Release|Any CPU
-		{828FB8B0-D6A6-43B0-9E76-5545EE5EE04F}.Release|x86.Build.0 = Release|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Debug|x64.Build.0 = Debug|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Debug|x86.Build.0 = Debug|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Release|Any CPU.Build.0 = Release|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Release|x64.ActiveCfg = Release|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Release|x64.Build.0 = Release|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Release|x86.ActiveCfg = Release|Any CPU
-		{039221D7-09E7-443E-9A03-0497EDB60462}.Release|x86.Build.0 = Release|Any CPU
-	EndGlobalSection
-EndGlobal
diff --git a/SoilMates/SoilMatesBL/IMenuBL.cs b/SoilMates/SoilMatesBL/IMenuBL.cs
deleted file mode 100644
index 7023772..0000000
--- a/SoilMates/SoilMatesBL/IMenuBL.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-namespace SoilMatesBL
-{
-    /// <summary>
-    /// Interface for menu user input validation
-    /// </summary>
-    public interface IMenuBL
-    {
-        bool SignInInputValidation(string input);
-
-        bool CustomerMenuInputValidation(string input);
-
-        bool EmployeeMenuInputValidation(string input);
-
-        bool MenuOptionsValidation(string pattern, string input, string message);
-
-        bool NameValidation(string input);
-
-        bool EmailValidation(string input);
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesBL/MenuBL.cs b/SoilMates/SoilMatesBL/MenuBL.cs
deleted file mode 100644
index a20fafc..0000000
--- a/SoilMates/SoilMatesBL/MenuBL.cs
+++ /dev/null
@@ -1,99 +0,0 @@
-using System.Text.RegularExpressions;
-using System;
-
-namespace SoilMatesBL
-{
-    /// <summary>
-    /// Menu user input validation 
-    /// </summary>
-    public class MenuBL : IMenuBL
-    {
-        /// <summary>
-        /// Checks if user signin input is valid based on sign options
-        /// </summary>
-        /// <param name="input"></param>
-        /// <returns></returns>
-        public bool SignInInputValidation(string input)
-        {
-            string loginInputPattern = "[0-1x]";
-            string message = "Please select from options.\n";
-            return MenuOptionsValidation(loginInputPattern, input, message);
-        }
-
-        public bool LoginInInputValidation(string input)
-        {
-            string loginInputPattern = "[0-1x]";
-            string message = "Please select from options.\n";
-            return MenuOptionsValidation(loginInputPattern, input, message);
-        }
-
-        /// <summary>
-        /// Checks if customer entered valid menu option 
-        /// </summary>
-        /// <param name="input"></param>
-        /// <returns></returns>
-        public bool CustomerMenuInputValidation(string input)
-        {
-            string customerInputPattern = "[0-3x]";
-            string message = "Please select from menu options.\n";
-            return MenuOptionsValidation(customerInputPattern, input, message);
-        }
-
-        /// <summary>
-        /// check manager intered a valid input based on customer options 
-        /// </summary>
-        /// <param name="input"></param>
-        /// <returns></returns>
-        public bool EmployeeMenuInputValidation(string input)
-        {
-            string customerInputPattern = "[0-5x]";
-            string message = "Please select from menu options.\n";
-            return MenuOptionsValidation(customerInputPattern, input, message);
-        }
-
-        /// <summary>
-        /// Check if user entered a valid name
-        /// </summary>
-        /// <param name="input"></param>
-        /// <returns></returns>
-        public bool NameValidation(string input)
-        {
-            string namePattern = "[a-zA-Z]";
-            string message = "Invalid name, do not use numbers or special characters.\n";
-            return MenuOptionsValidation(namePattern, input, message);
-        }
-
-        /// <summary>
-        /// Check if email is in proper format
-        /// </summary>
-        /// <param name="input"></param>
-        /// <returns></returns>
-        public bool EmailValidation(string input)
-        {
-            string namePattern = "^\\S+@\\S+.\\S+$";
-            string message = "Invalid email!\n";
-            return MenuOptionsValidation(namePattern, input, message);
-        }
-
-        /// <summary>
-        /// Compares given input to allowable regex pattern and displayes message
-        /// </summary>
-        /// <param name="pattern"></param>
-        /// <param name="input"></param>
-        /// <param name="message"></param>
-        /// <returns></returns>
-        public bool MenuOptionsValidation(string pattern, string input, string message)
-        {
-            if (string.IsNullOrWhiteSpace(input))
-            {
-                Console.WriteLine(message);
-                return false;
-            }
-
-            Regex regex = new Regex(pattern);
-            if (regex.IsMatch(input)) return true;
-            Console.WriteLine(message);
-            return false;
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/DBrepo.cs b/SoilMates/SoilMatesDB/DBrepo.cs
deleted file mode 100644
index 2c0158f..0000000
--- a/SoilMates/SoilMatesDB/DBrepo.cs
+++ /dev/null
@@ -1,444 +0,0 @@
-using System.Linq;
-using Microsoft.EntityFrameworkCore;
-using System.Collections.Generic;
-using SoilMatesDB.Models;
-using Serilog;
-
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Database repository for soilmates
-    /// </summary>
-    public class DBrepo : ICustomerRepo, ILocationRepo, IOrdersRepo, IProductRepo, IIventoryRepo, IManagerRepo, IRepository, IOrderProduct
-    {
-        /// <summary>
-        /// Defines database context
-        /// </summary>
-        private SoilMatesContext context;
-
-        /// <summary>
-        /// Repository constructor
-        /// </summary>
-        /// <param name="context"></param>
-        public DBrepo(SoilMatesContext context)
-        {
-            this.context = context;
-        }
-
-        /// <summary>
-        /// Adds customer to Customers dataset
-        /// </summary>
-        /// <param name="customer"></param>
-        public void AddCustomer(Customer customer)
-        {
-            context.Customers.Add(customer);
-            Log.Information("Added customer to repository.");
-        }
-
-        /// <summary>
-        /// Retrieves list of customers in database
-        /// </summary>
-        /// <returns></returns>
-        public List<Customer> GetAllCustomers()
-        {
-            Log.Information("Retrieved all customers from repository.");
-            return context.Customers.Include(customer => customer).ToList();
-        }
-
-        /// <summary>
-        /// Retrieves customer from database by id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public Customer GetCustomer(int id)
-        {
-            Log.Information("Retrieved customer from repository.");
-            return (Customer)context.Customers.FirstOrDefault(x => x.Id == id);
-        }
-
-
-        /// <summary>
-        /// Find customer by email informaion
-        /// </summary>
-        /// <param name="email"></param>
-        /// <returns></returns>
-        public Customer GetCustomerByEmail(string email)
-        {
-            Log.Information("Retrieved customer from repository.");
-            return (Customer)context.Customers.FirstOrDefault(x => x.Email.Equals(email));
-        }
-
-        public Manager GetManagerByEmail(string email)
-        {
-            Log.Information("Retrieved manager from repository.");
-            return (Manager)context.Managers.FirstOrDefault(x => x.Email.Equals(email));
-        }
-
-
-
-        /// <summary>
-        /// Retrieves customer from database by name of customer
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns></returns>
-        public Customer GetCustomer(string name)
-        {
-            Log.Information("Retrieved customer from repository.");
-            return (Customer)context.Customers.FirstOrDefault(x => x.Name == name);
-        }
-
-        /// <summary>
-        /// Retrieves customer by email and password combination
-        /// </summary>
-        /// <param name="password"></param>
-        /// <param name="email"></param>
-        /// <returns></returns>
-        public Customer GetCustomerByLogin(string password, string email)
-        {
-            Log.Information("Retrieved customer from repository.");
-            return (Customer)context.Customers.FirstOrDefault(x => x.Password == password && x.Email == email);
-        }
-
-        /// <summary>
-        /// Adds inventory model to database
-        /// </summary>
-        /// <param name="inventory"></param>
-        public void AddInventory(Inventory inventory)
-        {
-            Log.Information("Added inventory item.");
-            context.Inventories.Add(inventory);
-        }
-
-        /// <summary>
-        /// Retrieves inventory object from database by product id and location id
-        /// </summary>
-        /// <param name="productId"></param>
-        /// <param name="locationId"></param>
-        /// <returns></returns>
-        public Inventory GetInventoryItem(int productId, int locationId)
-        {
-            Log.Information("Retrieved inventory item.");
-            return (Inventory)context.Inventories.FirstOrDefault(x => x.ProductForeingId == productId && x.LocationForeignId == locationId);
-        }
-
-        /// <summary>
-        /// Retrieves list of all invetory objects from database
-        /// </summary>
-        /// <returns></returns>
-        public List<Inventory> GetAllInventory()
-        {
-            Log.Information("Retrieved all inventory items.");
-            return context.Inventories.Include(inventory => inventory.Product).Include(inventory => inventory.Location).ToList();
-        }
-
-        /// <summary>
-        /// Retrieves list of invetory items from databse by porduct id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public List<Inventory> GetInventoryItemByProductId(int id)
-        {
-            Log.Information("Retrieved inventory list for product.");
-            return context.Inventories.Include(inventory => inventory.Product).Include(inventory => inventory.Location).ToList();
-        }
-
-        /// <summary>
-        /// Retrieves list of inventory items from database by location id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public List<Inventory> GetInventoryItemByLocationId(int id)
-        {
-            Log.Information("Retrieved list of inventory for location.");
-            return context.Inventories.Include(inventory => inventory.Product).Include(inventory => inventory.Location).ToList();
-        }
-
-        /// <summary>
-        /// Retrieves list of products from database by location id
-        /// </summary>
-        /// <param name="location"></param>
-        /// <returns></returns>
-        public List<Inventory> GetProductsByLocationId(Location location)
-        {
-            Log.Information("Retrieved inventory by location id.");
-            return context.Inventories.Include(i => i.Location).Include(i => i.Product).Include(i => i.Quantity).ToList();
-        }
-
-        /// <summary>
-        /// Retrieves list of inventory objects by product id
-        /// </summary>
-        /// <param name="product"></param>
-        /// <returns></returns>
-        public List<Inventory> GetLocationsByProductId(Product product)
-        {
-            Log.Information("Retrieved inventory by product id.");
-            return context.Inventories.Select(s => s).Where(x => x.Product.Description == product.Description).ToList();
-        }
-
-        /// <summary>
-        /// Adds location to database
-        /// </summary>
-        /// <param name="location"></param>
-        public void AddLocation(Location location)
-        {
-            Log.Information("Added location to repository.");
-            context.Locations.Add(location);
-        }
-
-        /// <summary>
-        /// Returns all locations in database
-        /// </summary>
-        /// <returns></returns>
-        public List<Location> GetAllLocations()
-        {
-            Log.Information("Retrieved all locations in repository.");
-            return context.Locations.Include(s => s.StoreProducts).ToList();
-        }
-
-        /// <summary>
-        /// returns all location by location id 
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public Location GetLocationById(int id)
-        {
-            Log.Information("Retrieved location by id.");
-            return (Location)context.Locations.Include(x => x.StoreProducts).ThenInclude(x => x.Product).FirstOrDefault(x => x.LocationId == id);
-        }
-
-        /// <summary>
-        /// Returns location by a given name
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns>location by id</returns>
-        public Location GetLocationByName(string name)
-        {
-            Log.Information("Retrieved location by name.");
-            return (Location)context.Locations.Include(x => x).FirstOrDefault(x => x.Name == name);
-        }
-
-        /// <summary>
-        /// Removes location by location 
-        /// </summary>
-        /// <param name="location"></param>
-        public void RemoveLocation(Location location)
-        {
-            Log.Information("Removed location from locations in repository");
-            context.Locations.Remove(location);
-            SaveChanges();
-        }
-
-        /// <summary>
-        /// Add order item OrderProduct to dataset OrderProducts 
-        /// </summary>
-        /// <param name="lineItem"></param>
-        public void AddOrderProduct(OrderProduct lineItem)
-        {
-            Log.Information("Added line item to order.");
-            context.OrderProducts.Add(lineItem);
-        }
-
-        /// <summary>
-        /// Add manager to dataset Managers
-        /// </summary>
-        /// <param name="manager"></param>
-        public void AddManager(Manager manager)
-        {
-            Log.Information("Added Manager.");
-            context.Managers.Add(manager);
-        }
-
-        /// <summary>
-        /// Add order to dataset Orders
-        /// </summary>
-        /// <param name="order"></param>
-        public void AddOrder(Order order)
-        {
-            Log.Information("Added order.");
-            context.Orders.Add(order);
-        }
-
-        /// <summary>
-        /// Add product to dataset Products
-        /// </summary>
-        /// <param name="product"></param>
-        public void AddProduct(Product product)
-        {
-            Log.Information("Added Product.");
-            context.Products.Add(product);
-        }
-
-        /// <summary>
-        /// Get order item OrderProduct by orderid and productid
-        /// </summary>
-        /// <param name="orderId"></param>
-        /// <param name="productId"></param>
-        /// <returns>Order product</returns>
-        public OrderProduct GetOrderProduct(int orderId, int productId)
-        {
-            Log.Information("TPurchased item in order retrieved by order id.");
-            return (OrderProduct)context.OrderProducts.FirstOrDefault(x => x.OrderForiegnId == orderId && x.ProductForiegnId == productId);
-        }
-
-        /// <summary>
-        /// Returns list of all OrderProducts in dataset OrderProducts
-        /// </summary>
-        /// <returns></returns>
-        public List<OrderProduct> GetAllOrderProduct()
-        {
-            Log.Information("Retrieved all purchased items.");
-            return context.OrderProducts.Include(s => s).ToList();
-        }
-
-        /// <summary>
-        /// Returns list of all managers in Managers dataset
-        /// </summary>
-        /// <returns></returns>
-        public List<Manager> GetAllManagers()
-        {
-            Log.Information("Retrieved all managers.");
-            return context.Managers.Include(s => s).ToList();
-        }
-
-        /// <summary>
-        /// Returns list of all orders in Orders dataset
-        /// </summary>
-        /// <returns></returns>
-        public List<Order> GetAllOrders()
-        {
-            Log.Information("Retrieved all orders.");
-            return context.Orders.Include(s => s).ToList();
-        }
-
-        /// <summary>
-        /// Returns list of all products in Products dataset 
-        /// </summary>
-        /// <returns></returns>
-        public List<Product> GetAllProducts()
-        {
-            Log.Information("Retrieved all porducts in repository.");
-            return context.Products.ToList();
-        }
-
-        /// <summary>
-        /// Retrieves porduct by product name
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns></returns>
-        public Product GetProduct(string name)
-        {
-            Log.Information("Retrieved product by name.");
-            return (Product)context.Products.FirstOrDefault(x => x.Name == name);
-        }
-
-        /// <summary>
-        /// Retrieves product from database by id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public Product GetProduct(int id)
-        {
-            Log.Information("Retrieved product by id.");
-            return (Product)context.Products.FirstOrDefault(x => x.ProductId == id);
-        }
-
-        /// <summary>
-        /// Retrieves manager from database by id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public Manager GetManagerById(int id)
-        {
-            Log.Information("Reterived manager by id.");
-            return (Manager)context.Managers.FirstOrDefault(x => x.Id == id);
-        }
-
-        /// <summary>
-        /// Returns list of orders by customer id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public List<Order> GetOrderByCustomerId(int id)
-        {
-            Log.Information("Retrieved order for customer.");
-            return context.Orders.Include(s => s.LineItem).ThenInclude(s => s.Product).ToList();
-        }
-
-        /// <summary>
-        /// Returns list of orders by customer id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public List<Order> GetOrderByLocationId(int id)
-        {
-            Log.Information("Retrieved order for location.");
-            return context.Orders.Include(s => s.LineItem).ThenInclude(s => s.Product).ToList();
-        }
-
-        /// <summary>
-        /// Retrieves product by product name
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns></returns>
-        public Product GetProductByName(string name)
-        {
-            Log.Information("Retrieved product by name.");
-            return (Product)context.Products.FirstOrDefault(x => x.Name == name);
-        }
-
-        /// <summary>
-        /// Returns manager with matching password and email
-        /// </summary>
-        /// <param name="password"></param>
-        /// <param name="email"></param>
-        /// <returns></returns>
-        public Manager GetManagerByLogin(string password, string email)
-        {
-            Log.Information("Retrieved manager signed in.");
-            return (Manager)context.Managers.FirstOrDefault(x => x.Password == password && x.Email == email);
-        }
-
-        /// <summary>
-        /// Save changes to repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            context.SaveChanges();
-        }
-
-        /// <summary>
-        /// Removes product from repository
-        /// </summary>
-        /// <param name="product"></param>
-        public void RemoveProduct(Product product)
-        {
-            Log.Information("Removed product.");
-            context.Products.Remove(product);
-            SaveChanges();
-        }
-
-        /// <summary>
-        /// Removea inventory item from repository
-        /// </summary>
-        /// <param name="item"></param>
-        public void RemoveInvetoryItem(Inventory item)
-        {
-            Log.Information("Removed inventory item.");
-            context.Inventories.Remove(item);
-            SaveChanges();
-        }
-
-        /// <summary>
-        /// Removes manager from repository
-        /// </summary>
-        /// <param name="manager"></param>
-        public void RemoveManager(Manager manager)
-        {
-            Log.Information("Removed manager.");
-            context.Managers.Remove(manager);
-            SaveChanges();
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/ICustomerRepo.cs b/SoilMates/SoilMatesDB/ICustomerRepo.cs
deleted file mode 100644
index 14c5b1c..0000000
--- a/SoilMates/SoilMatesDB/ICustomerRepo.cs
+++ /dev/null
@@ -1,26 +0,0 @@
-using SoilMatesDB.Models;
-using System.Collections.Generic;
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for customer repository
-    /// </summary>
-    public interface ICustomerRepo
-    {
-        void AddCustomer(Customer customer);
-
-        List<Customer> GetAllCustomers();
-
-        Customer GetCustomer(string name);
-
-        Customer GetCustomer(int id);
-
-        void SaveChanges();
-
-        Customer GetCustomerByLogin(string password, string email);
-
-        Customer GetCustomerByEmail(string email);
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/IIventoryRepo.cs b/SoilMates/SoilMatesDB/IIventoryRepo.cs
deleted file mode 100644
index 644aaae..0000000
--- a/SoilMates/SoilMatesDB/IIventoryRepo.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-using SoilMatesDB.Models;
-using System.Collections.Generic;
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for Inventory Repository
-    /// </summary>
-    public interface IIventoryRepo
-    {
-        List<Inventory> GetAllInventory();
-        void AddInventory(Inventory item);
-        List<Inventory> GetInventoryItemByProductId(int id);
-        List<Inventory> GetInventoryItemByLocationId(int id);
-        void RemoveInvetoryItem(Inventory item);
-        Inventory GetInventoryItem(int productId, int locationId);
-        void SaveChanges();
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/ILocationRepo.cs b/SoilMates/SoilMatesDB/ILocationRepo.cs
deleted file mode 100644
index c7e82fd..0000000
--- a/SoilMates/SoilMatesDB/ILocationRepo.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-using System.Collections.Generic;
-using System.Threading.Tasks;
-using SoilMatesDB.Models;
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for location Repository
-    /// </summary>
-    public interface ILocationRepo
-    {
-        List<Location> GetAllLocations();
-
-        void AddLocation(Location location);
-
-        Location GetLocationById(int id);
-
-        Location GetLocationByName(string name);
-
-        void RemoveLocation(Location location);
-
-        void SaveChanges();
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/IManagerRepo.cs b/SoilMates/SoilMatesDB/IManagerRepo.cs
deleted file mode 100644
index d3e4717..0000000
--- a/SoilMates/SoilMatesDB/IManagerRepo.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-using System.Collections.Generic;
-using System.Threading.Tasks;
-using SoilMatesDB.Models;
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for manager repository
-    /// </summary>
-    public interface IManagerRepo
-    {
-        void AddManager(Manager manager);
-        List<Manager> GetAllManagers();
-        Manager GetManagerById(int id);
-        Manager GetManagerByLogin(string password, string email);
-        void RemoveManager(Manager manager);
-        Manager GetManagerByEmail(string email);
-        void SaveChanges();
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/IOrderProduct.cs b/SoilMates/SoilMatesDB/IOrderProduct.cs
deleted file mode 100644
index f44e14b..0000000
--- a/SoilMates/SoilMatesDB/IOrderProduct.cs
+++ /dev/null
@@ -1,16 +0,0 @@
-using System.Collections.Generic;
-using SoilMatesDB.Models;
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for OrderProduct repository
-    /// </summary>
-    public interface IOrderProduct
-    {
-        List<OrderProduct> GetAllOrderProduct();
-
-        void AddOrderProduct(OrderProduct lineItem);
-
-        OrderProduct GetOrderProduct(int orderId, int productId);
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/IOrdersRepo.cs b/SoilMates/SoilMatesDB/IOrdersRepo.cs
deleted file mode 100644
index 79cfa61..0000000
--- a/SoilMates/SoilMatesDB/IOrdersRepo.cs
+++ /dev/null
@@ -1,22 +0,0 @@
-using System.Threading.Tasks;
-using System.Collections.Generic;
-using SoilMatesDB.Models;
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for Orders repository
-    /// </summary>
-    public interface IOrdersRepo
-    {
-        void AddOrder(Order order);
-        List<Order> GetAllOrders();
-
-        List<Order> GetOrderByCustomerId(int id);
-
-        List<Order> GetOrderByLocationId(int id);
-
-        void SaveChanges();
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/IProductRepo.cs b/SoilMates/SoilMatesDB/IProductRepo.cs
deleted file mode 100644
index 54da28c..0000000
--- a/SoilMates/SoilMatesDB/IProductRepo.cs
+++ /dev/null
@@ -1,21 +0,0 @@
-using System.Collections.Generic;
-using System.Threading.Tasks;
-using SoilMatesDB.Models;
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface for product repo
-    /// </summary>
-    public interface IProductRepo
-    {
-        void AddProduct(Product product);
-        List<Product> GetAllProducts();
-
-        Product GetProduct(string name);
-
-        Product GetProduct(int id);
-        void RemoveProduct(Product product);
-
-        void SaveChanges();
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/IRepository.cs b/SoilMates/SoilMatesDB/IRepository.cs
deleted file mode 100644
index 90a30dd..0000000
--- a/SoilMates/SoilMatesDB/IRepository.cs
+++ /dev/null
@@ -1,10 +0,0 @@
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// Interface facad for repository interfaces for all models
-    /// </summary>
-    public interface IRepository : ICustomerRepo, ILocationRepo, IManagerRepo, IOrdersRepo, IProductRepo, IIventoryRepo, IOrderProduct
-    {
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Migrations/20201102174810_initial.Designer.cs b/SoilMates/SoilMatesDB/Migrations/20201102174810_initial.Designer.cs
deleted file mode 100644
index 255f827..0000000
--- a/SoilMates/SoilMatesDB/Migrations/20201102174810_initial.Designer.cs
+++ /dev/null
@@ -1,228 +0,0 @@
-ï»¿// <auto-generated />
-using System;
-using Microsoft.EntityFrameworkCore;
-using Microsoft.EntityFrameworkCore.Infrastructure;
-using Microsoft.EntityFrameworkCore.Migrations;
-using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
-using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
-using SoilMatesDB;
-
-namespace SoilMatesDB.Migrations
-{
-    [DbContext(typeof(SoilMatesContext))]
-    [Migration("20201102174810_initial")]
-    partial class initial
-    {
-        protected override void BuildTargetModel(ModelBuilder modelBuilder)
-        {
-#pragma warning disable 612, 618
-            modelBuilder
-                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
-                .HasAnnotation("ProductVersion", "3.1.9")
-                .HasAnnotation("Relational:MaxIdentifierLength", 63);
-
-            modelBuilder.Entity("SoilMatesDB.Models.Customer", b =>
-                {
-                    b.Property<int>("Id")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Email")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Password")
-                        .HasColumnType("text");
-
-                    b.Property<int>("UserType")
-                        .HasColumnType("integer");
-
-                    b.HasKey("Id");
-
-                    b.ToTable("Customers");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Inventory", b =>
-                {
-                    b.Property<int>("InventoryId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<int>("LocationForeignId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("ProductForeingId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("Quantity")
-                        .HasColumnType("integer");
-
-                    b.HasKey("InventoryId");
-
-                    b.HasIndex("LocationForeignId");
-
-                    b.HasIndex("ProductForeingId");
-
-                    b.ToTable("Inventories");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Location", b =>
-                {
-                    b.Property<int>("LocationId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Address")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.HasKey("LocationId");
-
-                    b.ToTable("Locations");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Manager", b =>
-                {
-                    b.Property<int>("Id")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Email")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Password")
-                        .HasColumnType("text");
-
-                    b.Property<int>("UserType")
-                        .HasColumnType("integer");
-
-                    b.HasKey("Id");
-
-                    b.ToTable("Managers");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Order", b =>
-                {
-                    b.Property<int>("OrderId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Address")
-                        .HasColumnType("text");
-
-                    b.Property<int>("CustomerId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("LocationId")
-                        .HasColumnType("integer");
-
-                    b.Property<DateTime>("OrderTime")
-                        .HasColumnType("timestamp without time zone");
-
-                    b.Property<decimal>("TotalPrice")
-                        .HasColumnType("numeric");
-
-                    b.HasKey("OrderId");
-
-                    b.HasIndex("LocationId");
-
-                    b.ToTable("Orders");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.OrderProduct", b =>
-                {
-                    b.Property<int>("Id")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<int>("OrderForiegnId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("ProductForiegnId")
-                        .HasColumnType("integer");
-
-                    b.HasKey("Id");
-
-                    b.HasIndex("OrderForiegnId");
-
-                    b.HasIndex("ProductForiegnId");
-
-                    b.ToTable("OrderProducts");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Product", b =>
-                {
-                    b.Property<int>("ProductId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Description")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.Property<decimal>("Price")
-                        .HasColumnType("numeric");
-
-                    b.HasKey("ProductId");
-
-                    b.ToTable("Products");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Inventory", b =>
-                {
-                    b.HasOne("SoilMatesDB.Models.Location", "Location")
-                        .WithMany("StoreProducts")
-                        .HasForeignKey("LocationForeignId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-
-                    b.HasOne("SoilMatesDB.Models.Product", "Product")
-                        .WithMany("ProductLocations")
-                        .HasForeignKey("ProductForeingId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Order", b =>
-                {
-                    b.HasOne("SoilMatesDB.Models.Location", null)
-                        .WithMany("orderHistory")
-                        .HasForeignKey("LocationId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.OrderProduct", b =>
-                {
-                    b.HasOne("SoilMatesDB.Models.Order", "Order")
-                        .WithMany("LineItem")
-                        .HasForeignKey("OrderForiegnId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-
-                    b.HasOne("SoilMatesDB.Models.Product", "Product")
-                        .WithMany("LineItem")
-                        .HasForeignKey("ProductForiegnId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-                });
-#pragma warning restore 612, 618
-        }
-    }
-}
diff --git a/SoilMates/SoilMatesDB/Migrations/20201102174810_initial.cs b/SoilMates/SoilMatesDB/Migrations/20201102174810_initial.cs
deleted file mode 100644
index 05e5165..0000000
--- a/SoilMates/SoilMatesDB/Migrations/20201102174810_initial.cs
+++ /dev/null
@@ -1,198 +0,0 @@
-ï»¿using System;
-using Microsoft.EntityFrameworkCore.Migrations;
-using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
-
-namespace SoilMatesDB.Migrations
-{
-    public partial class initial : Migration
-    {
-        protected override void Up(MigrationBuilder migrationBuilder)
-        {
-            migrationBuilder.CreateTable(
-                name: "Customers",
-                columns: table => new
-                {
-                    Id = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    UserType = table.Column<int>(nullable: false),
-                    Name = table.Column<string>(nullable: true),
-                    Email = table.Column<string>(nullable: true),
-                    Password = table.Column<string>(nullable: true)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_Customers", x => x.Id);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "Locations",
-                columns: table => new
-                {
-                    LocationId = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    Name = table.Column<string>(nullable: true),
-                    Address = table.Column<string>(nullable: true)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_Locations", x => x.LocationId);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "Managers",
-                columns: table => new
-                {
-                    Id = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    UserType = table.Column<int>(nullable: false),
-                    Name = table.Column<string>(nullable: true),
-                    Email = table.Column<string>(nullable: true),
-                    Password = table.Column<string>(nullable: true)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_Managers", x => x.Id);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "Products",
-                columns: table => new
-                {
-                    ProductId = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    Description = table.Column<string>(nullable: true),
-                    Name = table.Column<string>(nullable: true),
-                    Price = table.Column<decimal>(nullable: false)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_Products", x => x.ProductId);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "Orders",
-                columns: table => new
-                {
-                    OrderId = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    CustomerId = table.Column<int>(nullable: false),
-                    LocationId = table.Column<int>(nullable: false),
-                    Address = table.Column<string>(nullable: true),
-                    OrderTime = table.Column<DateTime>(nullable: false),
-                    TotalPrice = table.Column<decimal>(nullable: false)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_Orders", x => x.OrderId);
-                    table.ForeignKey(
-                        name: "FK_Orders_Locations_LocationId",
-                        column: x => x.LocationId,
-                        principalTable: "Locations",
-                        principalColumn: "LocationId",
-                        onDelete: ReferentialAction.Cascade);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "Inventories",
-                columns: table => new
-                {
-                    InventoryId = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    Quantity = table.Column<int>(nullable: false),
-                    ProductForeingId = table.Column<int>(nullable: false),
-                    LocationForeignId = table.Column<int>(nullable: false)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_Inventories", x => x.InventoryId);
-                    table.ForeignKey(
-                        name: "FK_Inventories_Locations_LocationForeignId",
-                        column: x => x.LocationForeignId,
-                        principalTable: "Locations",
-                        principalColumn: "LocationId",
-                        onDelete: ReferentialAction.Cascade);
-                    table.ForeignKey(
-                        name: "FK_Inventories_Products_ProductForeingId",
-                        column: x => x.ProductForeingId,
-                        principalTable: "Products",
-                        principalColumn: "ProductId",
-                        onDelete: ReferentialAction.Cascade);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "OrderProducts",
-                columns: table => new
-                {
-                    Id = table.Column<int>(nullable: false)
-                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
-                    OrderForiegnId = table.Column<int>(nullable: false),
-                    ProductForiegnId = table.Column<int>(nullable: false)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_OrderProducts", x => x.Id);
-                    table.ForeignKey(
-                        name: "FK_OrderProducts_Orders_OrderForiegnId",
-                        column: x => x.OrderForiegnId,
-                        principalTable: "Orders",
-                        principalColumn: "OrderId",
-                        onDelete: ReferentialAction.Cascade);
-                    table.ForeignKey(
-                        name: "FK_OrderProducts_Products_ProductForiegnId",
-                        column: x => x.ProductForiegnId,
-                        principalTable: "Products",
-                        principalColumn: "ProductId",
-                        onDelete: ReferentialAction.Cascade);
-                });
-
-            migrationBuilder.CreateIndex(
-                name: "IX_Inventories_LocationForeignId",
-                table: "Inventories",
-                column: "LocationForeignId");
-
-            migrationBuilder.CreateIndex(
-                name: "IX_Inventories_ProductForeingId",
-                table: "Inventories",
-                column: "ProductForeingId");
-
-            migrationBuilder.CreateIndex(
-                name: "IX_OrderProducts_OrderForiegnId",
-                table: "OrderProducts",
-                column: "OrderForiegnId");
-
-            migrationBuilder.CreateIndex(
-                name: "IX_OrderProducts_ProductForiegnId",
-                table: "OrderProducts",
-                column: "ProductForiegnId");
-
-            migrationBuilder.CreateIndex(
-                name: "IX_Orders_LocationId",
-                table: "Orders",
-                column: "LocationId");
-        }
-
-        protected override void Down(MigrationBuilder migrationBuilder)
-        {
-            migrationBuilder.DropTable(
-                name: "Customers");
-
-            migrationBuilder.DropTable(
-                name: "Inventories");
-
-            migrationBuilder.DropTable(
-                name: "Managers");
-
-            migrationBuilder.DropTable(
-                name: "OrderProducts");
-
-            migrationBuilder.DropTable(
-                name: "Orders");
-
-            migrationBuilder.DropTable(
-                name: "Products");
-
-            migrationBuilder.DropTable(
-                name: "Locations");
-        }
-    }
-}
diff --git a/SoilMates/SoilMatesDB/Migrations/SoilMatesContextModelSnapshot.cs b/SoilMates/SoilMatesDB/Migrations/SoilMatesContextModelSnapshot.cs
deleted file mode 100644
index e1ca8c5..0000000
--- a/SoilMates/SoilMatesDB/Migrations/SoilMatesContextModelSnapshot.cs
+++ /dev/null
@@ -1,226 +0,0 @@
-ï»¿// <auto-generated />
-using System;
-using Microsoft.EntityFrameworkCore;
-using Microsoft.EntityFrameworkCore.Infrastructure;
-using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
-using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
-using SoilMatesDB;
-
-namespace SoilMatesDB.Migrations
-{
-    [DbContext(typeof(SoilMatesContext))]
-    partial class SoilMatesContextModelSnapshot : ModelSnapshot
-    {
-        protected override void BuildModel(ModelBuilder modelBuilder)
-        {
-#pragma warning disable 612, 618
-            modelBuilder
-                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
-                .HasAnnotation("ProductVersion", "3.1.9")
-                .HasAnnotation("Relational:MaxIdentifierLength", 63);
-
-            modelBuilder.Entity("SoilMatesDB.Models.Customer", b =>
-                {
-                    b.Property<int>("Id")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Email")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Password")
-                        .HasColumnType("text");
-
-                    b.Property<int>("UserType")
-                        .HasColumnType("integer");
-
-                    b.HasKey("Id");
-
-                    b.ToTable("Customers");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Inventory", b =>
-                {
-                    b.Property<int>("InventoryId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<int>("LocationForeignId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("ProductForeingId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("Quantity")
-                        .HasColumnType("integer");
-
-                    b.HasKey("InventoryId");
-
-                    b.HasIndex("LocationForeignId");
-
-                    b.HasIndex("ProductForeingId");
-
-                    b.ToTable("Inventories");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Location", b =>
-                {
-                    b.Property<int>("LocationId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Address")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.HasKey("LocationId");
-
-                    b.ToTable("Locations");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Manager", b =>
-                {
-                    b.Property<int>("Id")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Email")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Password")
-                        .HasColumnType("text");
-
-                    b.Property<int>("UserType")
-                        .HasColumnType("integer");
-
-                    b.HasKey("Id");
-
-                    b.ToTable("Managers");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Order", b =>
-                {
-                    b.Property<int>("OrderId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Address")
-                        .HasColumnType("text");
-
-                    b.Property<int>("CustomerId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("LocationId")
-                        .HasColumnType("integer");
-
-                    b.Property<DateTime>("OrderTime")
-                        .HasColumnType("timestamp without time zone");
-
-                    b.Property<decimal>("TotalPrice")
-                        .HasColumnType("numeric");
-
-                    b.HasKey("OrderId");
-
-                    b.HasIndex("LocationId");
-
-                    b.ToTable("Orders");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.OrderProduct", b =>
-                {
-                    b.Property<int>("Id")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<int>("OrderForiegnId")
-                        .HasColumnType("integer");
-
-                    b.Property<int>("ProductForiegnId")
-                        .HasColumnType("integer");
-
-                    b.HasKey("Id");
-
-                    b.HasIndex("OrderForiegnId");
-
-                    b.HasIndex("ProductForiegnId");
-
-                    b.ToTable("OrderProducts");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Product", b =>
-                {
-                    b.Property<int>("ProductId")
-                        .ValueGeneratedOnAdd()
-                        .HasColumnType("integer")
-                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
-
-                    b.Property<string>("Description")
-                        .HasColumnType("text");
-
-                    b.Property<string>("Name")
-                        .HasColumnType("text");
-
-                    b.Property<decimal>("Price")
-                        .HasColumnType("numeric");
-
-                    b.HasKey("ProductId");
-
-                    b.ToTable("Products");
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Inventory", b =>
-                {
-                    b.HasOne("SoilMatesDB.Models.Location", "Location")
-                        .WithMany("StoreProducts")
-                        .HasForeignKey("LocationForeignId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-
-                    b.HasOne("SoilMatesDB.Models.Product", "Product")
-                        .WithMany("ProductLocations")
-                        .HasForeignKey("ProductForeingId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.Order", b =>
-                {
-                    b.HasOne("SoilMatesDB.Models.Location", null)
-                        .WithMany("orderHistory")
-                        .HasForeignKey("LocationId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-                });
-
-            modelBuilder.Entity("SoilMatesDB.Models.OrderProduct", b =>
-                {
-                    b.HasOne("SoilMatesDB.Models.Order", "Order")
-                        .WithMany("LineItem")
-                        .HasForeignKey("OrderForiegnId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-
-                    b.HasOne("SoilMatesDB.Models.Product", "Product")
-                        .WithMany("LineItem")
-                        .HasForeignKey("ProductForiegnId")
-                        .OnDelete(DeleteBehavior.Cascade)
-                        .IsRequired();
-                });
-#pragma warning restore 612, 618
-        }
-    }
-}
diff --git a/SoilMates/SoilMatesDB/Models/Customer.cs b/SoilMates/SoilMatesDB/Models/Customer.cs
deleted file mode 100644
index 7b6eebc..0000000
--- a/SoilMates/SoilMatesDB/Models/Customer.cs
+++ /dev/null
@@ -1,27 +0,0 @@
-using System.Dynamic;
-using System.Collections.Generic;
-using System;
-
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// Customer Model inherits from user
-    /// </summary>
-    public class Customer : User
-    {
-        public Customer()
-        {
-            UserType = 0;
-        }
-
-        public Customer(string name, string email, string password)
-        {
-            this.Name = name;
-            this.Email = email;
-            this.Password = password;
-            this.UserType = 0;
-        }
-
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/Inventory.cs b/SoilMates/SoilMatesDB/Models/Inventory.cs
deleted file mode 100644
index e17570c..0000000
--- a/SoilMates/SoilMatesDB/Models/Inventory.cs
+++ /dev/null
@@ -1,43 +0,0 @@
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// Inventory class connects products to locations
-    /// </summary>
-    public class Inventory
-    {
-        /// <summary>
-        /// Inventory is initialized to 1
-        /// </summary>
-        public Inventory()
-        {
-            Quantity = 1;
-        }
-
-        /// <summary>
-        /// Parameterized Inventory constructor for adding new inventory item by the manager
-        /// </summary>
-        /// <param name="location"></param>
-        /// <param name="product"></param>
-        /// <param name="locationForeignId"></param>
-        /// <param name="productForeingId"></param>
-        public Inventory(Location location, Product product, int locationForeignId, int productForeingId)
-        {
-            Quantity = 1;
-            Location = location;
-            Product = product;
-            LocationForeignId = locationForeignId;
-            ProductForeingId = productForeingId;
-        }
-        public int InventoryId { get; set; }
-        public int Quantity { get; set; }
-
-        public int ProductForeingId { get; set; }
-
-        public Product Product { get; set; }
-
-        public int LocationForeignId { get; set; }
-
-        public Location Location { get; set; }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/Location.cs b/SoilMates/SoilMatesDB/Models/Location.cs
deleted file mode 100644
index 077bef4..0000000
--- a/SoilMates/SoilMatesDB/Models/Location.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-using System.Collections.Generic;
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// Location Model
-    /// </summary>
-    public class Location
-    {
-        public int LocationId { get; set; }
-
-        public string Name { get; set; }
-
-        public string Address { get; set; }
-
-        public List<Inventory> StoreProducts { get; set; }
-
-        public List<Order> orderHistory { get; set; }
-
-        public Location() { }
-
-        public Location(string name, string address)
-        {
-            this.Name = name;
-            this.Address = address;
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/Manager.cs b/SoilMates/SoilMatesDB/Models/Manager.cs
deleted file mode 100644
index b5b1401..0000000
--- a/SoilMates/SoilMatesDB/Models/Manager.cs
+++ /dev/null
@@ -1,21 +0,0 @@
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// Manager model
-    /// </summary>
-    public class Manager : User
-    {
-        public Manager()
-        {
-            UserType = 1;
-        }
-        public Manager(string name, string email, string password)
-        {
-            this.Name = name;
-            this.Email = email;
-            this.Password = password;
-            this.UserType = 1;
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/Order.cs b/SoilMates/SoilMatesDB/Models/Order.cs
deleted file mode 100644
index d00e6a4..0000000
--- a/SoilMates/SoilMatesDB/Models/Order.cs
+++ /dev/null
@@ -1,23 +0,0 @@
-using System.Collections.Specialized;
-using System.Runtime.CompilerServices;
-using System;
-using System.Collections.Generic;
-
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// Order model
-    /// </summary>
-    public class Order
-    {
-        public int OrderId { get; set; }
-        public int CustomerId { get; set; }
-
-        public int LocationId { get; set; }
-        public string Address { get; set; }
-        public DateTime OrderTime { get; set; }
-        public Decimal TotalPrice { get; set; }
-        public List<OrderProduct> LineItem { get; set; }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/OrderProduct.cs b/SoilMates/SoilMatesDB/Models/OrderProduct.cs
deleted file mode 100644
index 01cd40e..0000000
--- a/SoilMates/SoilMatesDB/Models/OrderProduct.cs
+++ /dev/null
@@ -1,15 +0,0 @@
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// OrderProduct model, item in sale
-    /// </summary>
-    public class OrderProduct
-    {
-        public int Id { get; set; }
-        public int OrderForiegnId { get; set; }
-        public int ProductForiegnId { get; set; }
-
-        public Product Product { get; set; }
-        public Order Order { get; set; }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/Product.cs b/SoilMates/SoilMatesDB/Models/Product.cs
deleted file mode 100644
index f72b568..0000000
--- a/SoilMates/SoilMatesDB/Models/Product.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-using System.Collections.Generic;
-
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// Product Class
-    /// </summary>
-    public class Product
-    {
-        public int ProductId { get; set; }
-        public string Description { get; set; }
-        public string Name { get; set; }
-
-        public decimal Price { get; set; }
-        public List<Inventory> ProductLocations { get; set; }
-        public List<OrderProduct> LineItem { get; set; }
-
-        public Product() { }
-
-        public Product(string name, decimal price, string description)
-        {
-            this.Name = name;
-            this.Price = price;
-            this.Description = description;
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/Models/User.cs b/SoilMates/SoilMatesDB/Models/User.cs
deleted file mode 100644
index 333f881..0000000
--- a/SoilMates/SoilMatesDB/Models/User.cs
+++ /dev/null
@@ -1,15 +0,0 @@
-namespace SoilMatesDB.Models
-{
-    /// <summary>
-    /// User model to create managers and customers
-    /// </summary>
-    public class User
-    {
-        public int Id { get; set; }
-        public int UserType { get; set; }
-        public string Name { get; set; }
-        public string Email { get; set; }
-        public string Password { get; set; }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/SoilMatesContext.cs b/SoilMates/SoilMatesDB/SoilMatesContext.cs
deleted file mode 100644
index 7b54421..0000000
--- a/SoilMates/SoilMatesDB/SoilMatesContext.cs
+++ /dev/null
@@ -1,75 +0,0 @@
-using Microsoft.EntityFrameworkCore;
-using SoilMatesDB.Models;
-using Microsoft.Extensions.Configuration;
-using System.IO;
-
-namespace SoilMatesDB
-{
-    /// <summary>
-    /// SoilMates database context
-    /// </summary>
-    public class SoilMatesContext : DbContext
-    {
-        public DbSet<Customer> Customers { get; set; }
-        public DbSet<Manager> Managers { get; set; }
-
-        public DbSet<Location> Locations { get; set; }
-
-        public DbSet<Product> Products { get; set; }
-
-        public DbSet<Order> Orders { get; set; }
-
-        public DbSet<Inventory> Inventories { get; set; }
-        public DbSet<OrderProduct> OrderProducts { get; set; }
-
-        public SoilMatesContext() { }
-
-        /// <summary>
-        /// Constructor for context given options 
-        /// </summary>
-        /// <param name="options"></param>
-        /// <returns></returns>
-        public SoilMatesContext(DbContextOptions<SoilMatesContext> options) : base(options) { }
-
-
-        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
-        {
-            if (!(optionsBuilder.IsConfigured))
-            {
-                var configuration = new ConfigurationBuilder()
-                .SetBasePath(Directory.GetCurrentDirectory())
-                .AddJsonFile("appsettings.json")
-                .Build();
-
-                var connectionString = configuration.GetConnectionString("SoilMatesDB");
-                optionsBuilder.UseNpgsql(connectionString);
-            }
-        }
-
-        protected override void OnModelCreating(ModelBuilder modelBuilder)
-        {
-            modelBuilder.Entity<Inventory>()
-            .HasOne(e => e.Product)
-            .WithMany(v => v.ProductLocations)
-            .HasForeignKey(e => e.ProductForeingId);
-
-            modelBuilder.Entity<Inventory>()
-            .HasOne(e => e.Location)
-            .WithMany(v => v.StoreProducts)
-            .HasForeignKey(e => e.LocationForeignId);
-
-            modelBuilder.Entity<OrderProduct>()
-            .HasOne(e => e.Product)
-            .WithMany(v => v.LineItem)
-            .HasForeignKey(e => e.ProductForiegnId);
-
-            modelBuilder.Entity<OrderProduct>()
-            .HasOne(e => e.Order)
-            .WithMany(v => v.LineItem)
-            .HasForeignKey(e => e.OrderForiegnId);
-
-        }
-    }
-
-
-}
diff --git a/SoilMates/SoilMatesLib/CustomerService.cs b/SoilMates/SoilMatesLib/CustomerService.cs
deleted file mode 100644
index 84b421f..0000000
--- a/SoilMates/SoilMatesLib/CustomerService.cs
+++ /dev/null
@@ -1,78 +0,0 @@
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using Serilog;
-using System;
-
-namespace SoilMatesLib
-{
-
-    /// <summary>
-    /// Service that connects Customer to repository
-    /// </summary>
-    public class CustomerService
-    {
-        private ICustomerRepo repo;
-
-        /// <summary>
-        /// Customer service constructor with ICustomerRepo injection
-        /// </summary>
-        /// <param name="repo"></param>
-        public CustomerService(ICustomerRepo repo)
-        {
-            this.repo = repo;
-        }
-
-        /// <summary>
-        /// Adds customer
-        /// </summary>
-        /// <param name="newCustomer"></param>
-        public void AddCustomer(Customer newCustomer)
-        {
-            repo.AddCustomer(newCustomer);  //TODO: check for duplicate customers
-            Log.Information("New customer signed up.");
-        }
-
-        /// <summary>
-        /// Returns list of all customers
-        /// </summary>
-        /// <returns></returns>
-        public List<Customer> GetAllCustomers()
-        {
-            return repo.GetAllCustomers();
-        }
-
-        /// <summary>
-        /// Save changes to repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            repo.SaveChanges();
-        }
-
-        /// <summary>
-        /// Get customer by login infomation
-        /// </summary>
-        /// <param name="password"></param>
-        /// <param name="email"></param>
-        /// <returns></returns>
-        public Customer GetCustomerByLogin(string password, string email)
-        {
-            return repo.GetCustomerByLogin(password, email);
-        }
-
-        public void SignUpCustomer(string name, string email, string password)
-        {
-            if (repo.GetCustomerByEmail(email) != null)
-            {
-                Log.Warning("Existing user attempted new sign up.");
-                throw new Exception("Customer already exists!");
-            }
-            Customer newCustomer = new Customer(name, email, password);
-            AddCustomer(newCustomer);
-            SaveChanges();
-        }
-
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesLib/InventoryService.cs b/SoilMates/SoilMatesLib/InventoryService.cs
deleted file mode 100644
index 5529f0b..0000000
--- a/SoilMates/SoilMatesLib/InventoryService.cs
+++ /dev/null
@@ -1,132 +0,0 @@
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using System;
-using Serilog;
-
-namespace SoilMatesLib
-{
-    /// <summary>
-    /// Allows access to inventory repository services
-    /// </summary>
-    public class InventoryService
-    {
-        private IIventoryRepo repo;
-
-        public InventoryService(IRepository repo)
-        {
-            this.repo = repo;
-        }
-
-        /// <summary>
-        /// Adds inventory item
-        /// </summary>
-        /// <param name="inventory"></param>
-        public void AddInventory(Inventory inventory)
-        {
-            //if product location combination exists just update quantity
-            Inventory item = GetInventoryItem(inventory.ProductForeingId, inventory.LocationForeignId);
-            if (item != null)
-            {
-                throw new Exception("Inventory item already exists.");
-            }
-            repo.AddInventory(inventory);
-        }
-
-        public void AddItemToInventory(Location location, Product product, int quantity)
-        {
-            Inventory item = new Inventory(location, product, location.LocationId, product.ProductId);
-            try
-            {
-                AddInventory(item);
-            }
-            catch (Exception ex)
-            {
-                Console.WriteLine(ex.Message);
-            }
-            UpdateQuantity(item, quantity);
-            SaveChanges();
-        }
-
-        /// <summary>
-        /// Gets all inventory items for every store
-        /// </summary>
-        /// <returns></returns>
-        public List<Inventory> GetAllInventory()
-        {
-            return repo.GetAllInventory();
-        }
-
-        /// <summary>
-        /// Returns inventory for a specific location, specified by unique location id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public List<Inventory> GetInvetoryItemByLocationId(int id)
-        {
-            return repo.GetInventoryItemByLocationId(id);
-        }
-
-        /// <summary>
-        /// Returns inventory for based on product, to see where products are in different stores
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public List<Inventory> GetInventoryItemByProductId(int id)
-        {
-            return repo.GetInventoryItemByProductId(id);
-        }
-
-        /// <summary>
-        /// Removes an inventory item
-        /// </summary>
-        /// <param name="item"></param>
-        public void RemoveInventoryItem(Inventory item)
-        {
-            repo.RemoveInvetoryItem(item);
-        }
-
-        /// <summary>
-        /// Returns an inventory item given a unique product id and unique location id
-        /// </summary>
-        /// <param name="productId"></param>
-        /// <param name="locationId"></param>
-        /// <returns></returns>
-        public Inventory GetInventoryItem(int productId, int locationId)
-        {
-            return repo.GetInventoryItem(productId, locationId);
-        }
-
-        /// <summary>
-        /// Save changes in repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            repo.SaveChanges();
-        }
-
-        /// <summary>
-        /// Update quantity if inventory item
-        /// </summary>
-        /// <param name="item"></param>
-        /// <param name="quantity"></param>
-        public void UpdateQuantity(Inventory item, int quantity)
-        {
-            item.Quantity = quantity;
-        }
-
-        /// <summary>
-        /// 
-        /// </summary>
-        /// <param name="item"></param>
-        /// <param name="quantity"></param>
-        public void SoldInventoryUpdate(Inventory item, int quantity)
-        {
-            if (item.Quantity < quantity)
-            {
-                throw new System.Exception("Quantity sold cannot excede amount inventory, continue with order. ");
-            }
-            item.Quantity -= quantity;
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesLib/LocationService.cs b/SoilMates/SoilMatesLib/LocationService.cs
deleted file mode 100644
index 48bf93e..0000000
--- a/SoilMates/SoilMatesLib/LocationService.cs
+++ /dev/null
@@ -1,106 +0,0 @@
-using System.Linq;
-using System.Runtime.CompilerServices;
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using System;
-
-namespace SoilMatesLib
-{
-    /// <summary>
-    /// Provides services for location model to interact with repository
-    /// </summary>
-    public class LocationService
-    {
-        private ILocationRepo repo;
-
-        public LocationService(IRepository repo)
-        {
-            this.repo = repo;
-        }
-
-        /// <summary>
-        /// Adds location to our enterprise
-        /// </summary>
-        /// <param name="location"></param>
-        public void AddLocation(Location location)
-        {
-            repo.AddLocation(location);
-        }
-
-        public void AddNewLocation(string name, string address)
-        {
-            Location location = new Location(name, address);
-            if (!GetAllLocations().Any())
-            {
-                repo.AddLocation(location);
-            }
-            else
-            {
-                Location isDuplicate = GetLocationByName(location.Name);
-                if (isDuplicate == null)
-                {
-                    AddLocation(location);
-                }
-                else
-                {
-                    //if store name exists, check to see if if has the same address if so location is duplicate and not added 
-                    if (isDuplicate.Address == location.Address)
-                    {
-                        throw new Exception("Location already exists at this address.\n");
-                    }
-                    else
-                    {
-                        AddLocation(location);
-                    }
-                }
-            }
-        }
-
-        /// <summary>
-        /// Returns list of locations in repository
-        /// </summary>
-        /// <returns></returns>
-        public List<Location> GetAllLocations()
-        {
-            return repo.GetAllLocations();
-        }
-
-        /// <summary>
-        /// Returns location by id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public Location GetLocationById(int id)
-        {
-            return repo.GetLocationById(id);
-        }
-
-        /// <summary>
-        /// Get location by name
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns></returns>
-        public Location GetLocationByName(string name)
-        {
-            return repo.GetLocationByName(name);
-        }
-
-        /// <summary>
-        /// Remove a location 
-        /// </summary>
-        /// <param name="location"></param>
-        public void RemoveLocation(Location location)
-        {
-            repo.RemoveLocation(location);
-        }
-
-        /// <summary>
-        /// Save changes to repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            repo.SaveChanges();
-        }
-    }
-}
diff --git a/SoilMates/SoilMatesLib/ManagerService.cs b/SoilMates/SoilMatesLib/ManagerService.cs
deleted file mode 100644
index dc2c90c..0000000
--- a/SoilMates/SoilMatesLib/ManagerService.cs
+++ /dev/null
@@ -1,74 +0,0 @@
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using System;
-using Serilog;
-
-namespace SoilMatesLib
-{
-    /// <summary>
-    /// Service for manager model to instact with repository
-    /// </summary>
-    public class ManagerService
-    {
-        private IManagerRepo repo;
-
-        /// <summary>
-        ///  Constructor for manager service with repository injection
-        /// </summary>
-        /// <param name="repo"></param>
-        public ManagerService(IManagerRepo repo)
-        {
-            this.repo = repo;
-        }
-
-        /// <summary>
-        /// Adds manager
-        /// </summary>
-        /// <param name="newManager"></param>
-        public void AddManager(Manager newManager)
-        {
-            repo.AddManager(newManager);
-        }
-
-        /// <summary>
-        /// Sign up manager given user details
-        /// </summary>
-        /// <param name="name"></param>
-        /// <param name="email"></param>
-        /// <param name="password"></param>
-        public void SignUpManager(string name, string email, string password)
-        {
-
-            if (repo.GetManagerByEmail(email) != null)
-            {
-                Log.Warning("Existing user attempted new sign up.");
-                throw new Exception("Manager already exists!");
-            }
-            Manager newManager = new Manager(name, email, password);
-            AddManager(newManager);
-            SaveChanges();
-        }
-
-
-        /// <summary>
-        /// Returns manager with matching password and email
-        /// </summary>
-        /// <param name="password"></param>
-        /// <param name="email"></param>
-        /// <returns></returns>
-        public Manager GetManagerByLogin(string password, string email)
-        {
-            return repo.GetManagerByLogin(password, email);
-        }
-
-
-        /// <summary>
-        /// Save changes to repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            repo.SaveChanges();
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesLib/OrderProductService.cs b/SoilMates/SoilMatesLib/OrderProductService.cs
deleted file mode 100644
index fd12837..0000000
--- a/SoilMates/SoilMatesLib/OrderProductService.cs
+++ /dev/null
@@ -1,63 +0,0 @@
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-
-namespace SoilMatesLib
-{
-    /// <summary>
-    /// Line items in orders allowing for multiple porducts per order
-    /// </summary>
-    public class OrderProductService
-    {
-        private IOrderProduct repo;
-
-        public OrderProductService(IRepository repo)
-        {
-            this.repo = repo;
-        }
-
-        /// <summary>
-        /// Adds a line item to OrderProduct table
-        /// </summary>
-        /// <param name="orderProduct"></param>
-        public void AddOrderProduct(OrderProduct orderProduct)
-        {
-            repo.AddOrderProduct(orderProduct);
-        }
-
-        /// <summary>
-        /// Gets line item given order id and product id
-        /// </summary>
-        /// <param name="orderId"></param>
-        /// <param name="productId"></param>
-        /// <returns></returns>
-        public OrderProduct GetOrderProduct(int orderId, int productId)
-        {
-            return repo.GetOrderProduct(orderId, productId);
-        }
-
-        /// <summary>
-        /// Returns all line item (all purchased items)
-        /// </summary>
-        /// <returns></returns>
-        public List<OrderProduct> GetAllOrderProduct()
-        {
-            return repo.GetAllOrderProduct();
-        }
-
-
-        /// <summary>
-        /// Updates items in that customer selects to buy
-        /// </summary>
-        /// <param name="itemInCart"></param>
-        /// <param name="soldProduct"></param>
-        /// <param name="newOrder"></param>
-        public void UpdateOrderProductInCart(OrderProduct itemInCart, Product soldProduct, Order newOrder)
-        {
-            itemInCart.OrderForiegnId = newOrder.OrderId;
-            itemInCart.Product = soldProduct;
-            itemInCart.ProductForiegnId = soldProduct.ProductId;
-            itemInCart.Order = newOrder;
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesLib/OrderService.cs b/SoilMates/SoilMatesLib/OrderService.cs
deleted file mode 100644
index f502290..0000000
--- a/SoilMates/SoilMatesLib/OrderService.cs
+++ /dev/null
@@ -1,100 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-
-namespace SoilMatesLib
-{
-    /// <summary>
-    /// Service for order models to interact with repository
-    /// </summary>
-    public class OrderService
-    {
-        private IOrdersRepo repo;
-
-        /// <summary>
-        /// Constructor with IRepository injection
-        /// </summary>
-        /// <param name="repo"></param>
-        public OrderService(IRepository repo)
-        {
-            this.repo = repo;
-        }
-
-
-        /// <summary>
-        /// Add order to repository
-        /// </summary>
-        /// <param name="order"></param>
-        public void AddOrder(Order order)
-        {
-            repo.AddOrder(order);
-        }
-
-        /// <summary>
-        /// Get all orders from repository
-        /// </summary>
-        /// <returns></returns>
-        public List<Order> GetAllOrders()
-        {
-            return repo.GetAllOrders();
-        }
-
-        /// <summary>
-        /// Gets orders by customer id
-        /// </summary>
-        /// <param name="customerId"></param>
-        /// <returns></returns>
-        public List<Order> GetOrderByCustomerId(int customerId)
-        {
-            List<Order> ordersForCustomer = new List<Order>();
-            foreach (var item in repo.GetOrderByCustomerId(customerId))
-            {
-                if (item.CustomerId == customerId)
-                {
-                    ordersForCustomer.Add(item);
-                }
-            }
-            return ordersForCustomer;
-
-        }
-
-        public List<Order> GetOrderByLocatoinId(int locationId)
-        {
-            List<Order> ordersForCustomer = new List<Order>();
-            foreach (var item in repo.GetOrderByLocationId(locationId))
-            {
-                if (item.LocationId == locationId)
-                {
-                    ordersForCustomer.Add(item);
-                }
-            }
-            return ordersForCustomer;
-        }
-
-        /// <summary>
-        /// Submits order once customer is done adding items 
-        /// </summary>
-        /// <param name="newOrder"></param>
-        /// <param name="customerId"></param>
-        /// <param name="storeId"></param>
-        /// <param name="totalPrice"></param>
-        public void SubmitOrder(Order newOrder, int customerId, int storeId, decimal totalPrice)
-        {
-            newOrder.OrderTime = DateTime.Now;
-            newOrder.CustomerId = customerId;
-            newOrder.LocationId = storeId;
-            newOrder.TotalPrice = totalPrice;
-        }
-
-        /// <summary>
-        /// Saves changes to repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            repo.SaveChanges();
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesLib/ProductService.cs b/SoilMates/SoilMatesLib/ProductService.cs
deleted file mode 100644
index 791ec54..0000000
--- a/SoilMates/SoilMatesLib/ProductService.cs
+++ /dev/null
@@ -1,112 +0,0 @@
-using System.Collections.Generic;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using System;
-using Serilog;
-
-namespace SoilMatesLib
-{
-    /// <summary>
-    /// Service for product models to interact with repository
-    /// </summary>
-    public class ProductService
-    {
-        private IProductRepo repo;
-
-        /// <summary>
-        /// Product service constructor accepts IProductRepo injection for repository
-        /// </summary>
-        /// <param name="repo"></param>
-        public ProductService(IProductRepo repo)
-        {
-            this.repo = repo;
-        }
-
-
-        /// <summary>
-        /// Service adds a product to repository 
-        /// </summary>
-        /// <param name="product"></param>
-        public void AddProduct(Product product)
-        {
-            repo.AddProduct(product);
-        }
-
-        /// <summary>
-        /// Adds product given user input
-        /// </summary>
-        /// <param name="name"></param>
-        /// <param name="price"></param>
-        /// <param name="description"></param>
-        public void AddNewProduct(string name, decimal price, string description)
-        {
-            Product product = new Product(name, price, description);
-            if (GetAllProducts().Count == 0)
-            {
-
-                AddProduct(product);
-            }
-            else
-            {
-                Product isDuplicate = GetProduct(product.Name);
-                if (isDuplicate == null)
-                {
-                    AddProduct(product);
-                }
-                else
-                {
-                    Log.Warning("Attempted to add duplicate product.");
-                    throw new Exception("Product already exists, cannot be added!");
-                }
-            }
-        }
-
-        /// <summary>
-        /// Gets product from repository by name
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns></returns>
-        public Product GetProduct(string name)
-        {
-            return repo.GetProduct(name);
-        }
-
-
-        /// <summary>
-        /// Retrieves product from repostory by id
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public Product GetProduct(int id)
-        {
-            return repo.GetProduct(id);
-        }
-
-        /// <summary>
-        /// Retrieves list of products from repository
-        /// </summary>
-        /// <returns></returns>
-        public List<Product> GetAllProducts()
-        {
-            return repo.GetAllProducts();
-        }
-
-        /// <summary>
-        /// Removes a product from repository
-        /// </summary>
-        /// <param name="product"></param>
-        public void RemoveProduct(Product product)
-        {
-            repo.RemoveProduct(product);
-        }
-
-        /// <summary>
-        /// Saves changes to repository
-        /// </summary>
-        public void SaveChanges()
-        {
-            repo.SaveChanges();
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesLib/SoilMatesLib.csproj b/SoilMates/SoilMatesLib/SoilMatesLib.csproj
deleted file mode 100644
index 167503a..0000000
--- a/SoilMates/SoilMatesLib/SoilMatesLib.csproj
+++ /dev/null
@@ -1,18 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-
-  <ItemGroup>
-    <ProjectReference Include="..\SoilMatesDB\SoilMatesDB.csproj" />
-  </ItemGroup>
-
-
-  <ItemGroup>
-    <PackageReference Include="Serilog" Version="2.10.0" />
-  </ItemGroup>
-
-
-  <PropertyGroup>
-    <TargetFramework>netstandard2.0</TargetFramework>
-  </PropertyGroup>
-
-</Project>
diff --git a/SoilMates/SoilMatesTest/SoilMatesDBTest/DBRepoTest.cs b/SoilMates/SoilMatesTest/SoilMatesDBTest/DBRepoTest.cs
deleted file mode 100644
index ca055f9..0000000
--- a/SoilMates/SoilMatesTest/SoilMatesDBTest/DBRepoTest.cs
+++ /dev/null
@@ -1,355 +0,0 @@
-using System;
-using System.Reflection;
-using Xunit;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using System.Collections.Generic;
-using Microsoft.EntityFrameworkCore;
-using Microsoft.EntityFrameworkCore.InMemory;
-
-namespace SoilMatesTest.SoilMatesDBTest
-{
-    /// <summary>
-    /// Test database methods
-    /// </summary>
-    public class DBRepoTest
-    {
-        private DBrepo repo;
-
-        private readonly Customer testCustomer = new Customer()
-        {
-            Id = 1,
-            UserType = 0,
-            Name = "Shadow",
-            Email = "ShadowIncLLC@gmail.com",
-            Password = "woofwoof"
-        };
-
-        private readonly Manager testManager = new Manager()
-        {
-            Id = 1,
-            UserType = 1,
-            Name = "Karen",
-            Email = "KarensWW@gmail.com",
-            Password = "password"
-        };
-
-        private readonly Inventory testInventory = new Inventory()
-        {
-            InventoryId = 0,
-            ProductForeingId = 1,
-            LocationForeignId = 1,
-        };
-
-        private readonly List<Inventory> testInventories = new List<Inventory>() {
-            new Inventory() {
-                 InventoryId = 1,
-            ProductForeingId = 2,
-            LocationForeignId =2,
-            },
-              new Inventory() {
-                 InventoryId = 2,
-            ProductForeingId = 3,
-            LocationForeignId =3,
-            }
-        };
-
-        private readonly Location testLocation = new Location()
-        {
-            LocationId = 0,
-            Name = "TreeMates",
-            Address = "Tampa, FL",
-        };
-
-        private readonly Order testOrder = new Order()
-        {
-            OrderId = 1,
-            CustomerId = 1,
-            LocationId = 1,
-            Address = "Sebring, Fl",
-            OrderTime = DateTime.Now,
-            TotalPrice = 2.00m,
-        };
-
-        private readonly OrderProduct testOrderProduct = new OrderProduct()
-        {
-            Id = 2,
-            OrderForiegnId = 3,
-            ProductForiegnId = 1,
-        };
-
-        private readonly Product testProduct = new Product()
-        {
-            ProductId = 2,
-            Description = "Edible",
-            Name = "BlueBerry",
-            Price = 3.00m,
-        };
-
-        private readonly List<Product> testProducts = new List<Product>(){
-            new Product(){
-                ProductId = 6,
-                Description = "Succulent",
-                Name = "Aloe",
-                Price = 2.00m,
-            },
-            new Product(){
-                ProductId = 3,
-                Description = "Edible",
-                Name = "Mango Tree",
-                Price = 20.00m,
-            }
-        };
-
-        private readonly List<Location> testLocations = new List<Location>(){
-            new Location (){
-                LocationId = 3,
-                Name = "FlowerMates",
-                Address = "Tampa, FL",
-            },
-            new Location (){
-                LocationId = 1,
-                Name = "EdibleMates",
-                Address = "Dallas, TX",
-            }
-        };
-
-        private readonly List<Customer> testCustomers = new List<Customer>(){
-           new Customer(){
-               Id = 2,
-               UserType = 0,
-               Name = "Eric",
-               Email = "EricTheElectric@mail.usf.edu",
-               Password = "WOWmoment"
-           },
-           new Customer() {
-                Id = 3,
-               UserType = 0,
-               Name = "Will",
-               Email = "OllieAndWill@mail.com",
-               Password = "BostonCream",
-           },
-       };
-
-
-        private readonly List<Manager> testManagers = new List<Manager>(){
-           new Manager(){
-               Id = 4,
-               UserType = 1,
-               Name = "Babish",
-               Email = "Binging@mail.usf.edu",
-               Password = "Basics"
-           },
-           new Manager() {
-                Id = 5,
-               UserType = 0,
-               Name = "Schitt",
-               Email = "ShittsCreek@mail.com",
-               Password = "AlittleBitAlexis",
-           },
-       };
-
-
-        private void seed(SoilMatesContext testcontext)
-        {
-            testcontext.Customers.AddRange(testCustomers);
-            testcontext.Managers.AddRange(testManagers);
-            testcontext.Inventories.AddRange(testInventories);
-            testcontext.Locations.AddRange(testLocations);
-            testcontext.Products.AddRange(testProducts);
-            testcontext.SaveChanges();
-        }
-
-
-        /// <summary>
-        /// Tests if customer is added to repository correctly
-        /// </summary>
-        [Fact]
-        public void AddCustomerShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddCustomerShouldAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddCustomer(testCustomer);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.Customers.SingleAsync(n => n.Name == testCustomer.Name));
-        }
-
-        /// <summary>
-        /// Test if manager is added to repository
-        /// </summary>
-        [Fact]
-        public void AddManagerShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddManagerShouldAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddManager(testManager);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.Managers.SingleAsync(n => n.Name == testManager.Name));
-        }
-
-        /// <summary>
-        /// Test if inventory is added to repository correctly
-        /// </summary>
-        [Fact]
-        public void AddInventoryShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddInventoryShoudAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddInventory(testInventory);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.Inventories.SingleAsync(n => n.InventoryId == testInventory.InventoryId));
-        }
-
-        /// <summary>
-        /// Test if location is added to repository
-        /// </summary>
-        [Fact]
-        public void AddLocationShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddLocationShoudAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddLocation(testLocation);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.Inventories.SingleAsync(n => n.InventoryId == testInventory.InventoryId));
-        }
-
-        /// <summary>
-        /// Test if order is added to repository
-        /// </summary>
-        [Fact]
-        public void AddOrderShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddOrderShoudAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddOrder(testOrder);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.Orders.SingleAsync(n => n.OrderId == testOrder.OrderId));
-        }
-
-        /// <summary>
-        /// Test if add OrderProduct is added to repository
-        /// </summary>
-        [Fact]
-        public void AddOrderProductShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddOrderProductShoudAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddOrderProduct(testOrderProduct);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.OrderProducts.SingleAsync(n => n.Id == testOrderProduct.Id));
-        }
-
-        /// <summary>
-        /// Test if Product is added to repository
-        /// </summary>
-        [Fact]
-        public void AddProductShouldAdd()
-        {
-            //arrange
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("AddProductShoudAdd").Options;
-            using var testContext = new SoilMatesContext(options);
-            repo = new DBrepo(testContext);
-
-            //act
-            repo.AddProduct(testProduct);
-
-            //assert
-            using var assertContext = new SoilMatesContext(options);
-            Assert.NotNull(assertContext.Products.SingleAsync(n => n.Name == testProduct.Name));
-        }
-
-        /// <summary>
-        /// Test if GetCustomer method returns customer by id
-        /// </summary>
-        [Fact]
-        public void GetCustomerShouldGet()
-        {
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("GetCustomerShouldGet").Options;
-            using var testContext = new SoilMatesContext(options);
-            seed(testContext);
-
-            using var assertContext = new SoilMatesContext(options);
-            repo = new DBrepo(assertContext);
-
-            var result = repo.GetCustomer(3);
-
-            Assert.NotNull(result);
-            Assert.Equal("Will", result.Name);
-        }
-
-        /// <summary>
-        /// Test if manager can be retrieved by manager id
-        /// </summary>
-        [Fact]
-        public void GetManagerShouldGet()
-        {
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("GetManagerShouldGet").Options;
-            using var testContext = new SoilMatesContext(options);
-            seed(testContext);
-
-            using var assertContext = new SoilMatesContext(options);
-            repo = new DBrepo(assertContext);
-
-            var result = repo.GetManagerById(4);
-
-            Assert.NotNull(result);
-            Assert.Equal("Babish", result.Name);
-        }
-
-        /// <summary>
-        /// Test if product can be retrieved from repository by product id
-        /// </summary>
-        [Fact]
-        public void GetProductShouldGet()
-        {
-            var options = new DbContextOptionsBuilder<SoilMatesContext>().UseInMemoryDatabase("GetProductShouldGet").Options;
-            using var testContext = new SoilMatesContext(options);
-            seed(testContext);
-
-            using var assertContext = new SoilMatesContext(options);
-            repo = new DBrepo(assertContext);
-
-            var result = repo.GetProduct(6);
-
-            Assert.NotNull(result);
-            Assert.Equal("Aloe", result.Name);
-        }
-
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/AddProductMenu.cs b/SoilMates/SoilMatesUI/Menu/AddProductMenu.cs
deleted file mode 100644
index 8dcb46a..0000000
--- a/SoilMates/SoilMatesUI/Menu/AddProductMenu.cs
+++ /dev/null
@@ -1,52 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using SoilMatesLib;
-
-
-namespace SoilMatesUI.Menu
-{
-    public class AddProductMenu : IMenu
-    {
-
-        ProductService productService;
-        IRepository repo;
-        private LocationMenu locationMenu;
-
-        public AddProductMenu(IRepository repo)
-        {
-            this.repo = repo;
-            this.productService = new ProductService(repo);
-            this.locationMenu = new LocationMenu(repo);
-        }
-        public void Start()
-        {
-            string name, description;
-            decimal price;
-
-            Console.WriteLine("Enter plant name: ");
-            name = Console.ReadLine();
-            Console.WriteLine("Add plant description: ");
-            description = Console.ReadLine();
-            Console.WriteLine("Add plant price:");
-            price = Convert.ToDecimal(Console.ReadLine());
-            try
-            {
-                productService.AddNewProduct(name, price, description);
-            }
-            catch (Exception ex)
-            {
-                Console.WriteLine(ex.Message);
-                return;
-            }
-            productService.SaveChanges();
-
-            Console.WriteLine("New plant added! All plants in catalog listed below:");
-            foreach (var product in productService.GetAllProducts())
-            {
-                Console.WriteLine($"\tProduct id: {product.ProductId} \tProduct name: {product.Name}");
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/CustomerMenu.cs b/SoilMates/SoilMatesUI/Menu/CustomerMenu.cs
deleted file mode 100644
index 85c8a75..0000000
--- a/SoilMates/SoilMatesUI/Menu/CustomerMenu.cs
+++ /dev/null
@@ -1,77 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using SoilMatesLib;
-using System.Collections.Generic;
-
-namespace SoilMatesUI.Menu
-{
-    /// <summary>
-    /// Customer specific menu user interface
-    /// </summary>
-    public class CustomerMenu
-    {
-        IRepository repo;
-        InventoryMenu inventoryMenu;
-        private string userInput;
-        private IMenuBL menuBL = new MenuBL();
-        OrderMenu orderMenu;
-
-        /// <summary>
-        /// Customer menu constructor
-        /// </summary>
-        /// <param name="repo"></param>
-        public CustomerMenu(IRepository repo)
-        {
-            this.repo = repo;
-            this.orderMenu = new OrderMenu(repo);
-            this.inventoryMenu = new InventoryMenu(repo);
-        }
-
-        /// <summary>
-        /// Entry point for customer UI
-        /// </summary>
-        /// <param name="user"></param>
-        public void Start(Customer user)
-        {
-            Console.WriteLine();
-            Console.WriteLine("{0}, Welcome to SoilMates Plant Store!", user.Name);
-
-            bool isValidMenuItem;
-            do
-            {
-                PrintCustomerMenuOptions();
-                isValidMenuItem = menuBL.CustomerMenuInputValidation(userInput);
-
-                if (isValidMenuItem && userInput.Equals("0"))
-                {
-                    orderMenu.OrderPlant(user);
-                }
-
-                if (isValidMenuItem && userInput.Equals("1"))
-                {
-                    orderMenu.GetOrderHistory(user);
-
-                }
-                if (isValidMenuItem && userInput.Equals("2"))
-                {
-                    inventoryMenu.GetLocationInventory();
-                }
-            } while (!isValidMenuItem || !userInput.Equals("x"));
-        }
-
-        /// <summary>
-        /// prints menu options for customer
-        /// </summary>
-        public void PrintCustomerMenuOptions()
-        {
-            Console.WriteLine("[0] Order A Plant");
-            Console.WriteLine("[1] View Order History");
-            Console.WriteLine("[2] View Location Inventory"); //TODP
-            Console.WriteLine("[x] Exit");
-
-            userInput = Console.ReadLine();
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/IMenu.cs b/SoilMates/SoilMatesUI/Menu/IMenu.cs
deleted file mode 100644
index 285a025..0000000
--- a/SoilMates/SoilMatesUI/Menu/IMenu.cs
+++ /dev/null
@@ -1,13 +0,0 @@
-namespace SoilMatesUI.Menu
-{
-    /// <summary>
-    /// Main Menu interface for application
-    /// </summary>
-    public interface IMenu
-    {
-        ///<summary>
-        /// Provides entry point for UI menus
-        /// </summary>
-        void Start();
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/InventoryMenu.cs b/SoilMates/SoilMatesUI/Menu/InventoryMenu.cs
deleted file mode 100644
index 0f6d41d..0000000
--- a/SoilMates/SoilMatesUI/Menu/InventoryMenu.cs
+++ /dev/null
@@ -1,121 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using SoilMatesLib;
-using Serilog;
-
-namespace SoilMatesUI.Menu
-{
-    public class InventoryMenu : IMenu
-    {
-        ProductService productService;
-        LocationService locationService;
-        InventoryService inventoryService;
-        IRepository repo;
-
-        public InventoryMenu(IRepository repo)
-        {
-            this.repo = repo;
-            this.productService = new ProductService(repo);
-            this.locationService = new LocationService(repo);
-            this.inventoryService = new InventoryService(repo);
-        }
-
-        /// <summary>
-        /// Inventory menu start 
-        /// </summary>
-        public void Start() { }
-
-        /// <summary>
-        /// Adds plant to inventory
-        /// </summary>
-        public void AddPlantToInventory()
-        {
-            Console.WriteLine("Select a location from the following by id to add a plant to inventory:");
-            foreach (var location in locationService.GetAllLocations())
-            {
-                Console.WriteLine($"\tlocation id: {location.LocationId} location name: {location.Name}");
-            }
-            int idLocation = Int32.Parse(Console.ReadLine());
-            Location _location = locationService.GetLocationById(idLocation);
-
-            Console.WriteLine("Select product by id from list to add to store inventory: ");
-            foreach (var product in productService.GetAllProducts())
-            {
-                Console.WriteLine($"\tProduct id: {product.ProductId} product name: {product.Name}");
-            }
-            int idProduct = Int32.Parse(Console.ReadLine());
-            Product _product = productService.GetProduct(idProduct);
-
-            Console.WriteLine("Enter Quantity to be added: ");
-            int quantity = Int32.Parse(Console.ReadLine());
-
-            inventoryService.AddItemToInventory(_location, _product, quantity);
-
-        }
-
-        /// <summary>
-        /// Prints plant inventory
-        /// </summary>
-        public void PrintPlantInventory()
-        {
-            Console.WriteLine("Enter plant name to print inventory:");
-            string plantName = Console.ReadLine();
-            foreach (var plant in inventoryService.GetAllInventory())
-            {
-                if (plant == null)
-                {
-                    Console.WriteLine("Out of stock currently!");
-                    Log.Information($"{plant.Product.Name} is out of stock");
-                }
-                if (plant.Product.Name == plantName)
-                    Console.WriteLine($"\tName: {plant.Product.Name} \tLocation id: {plant.Location.Name} \tquantity: {plant.Quantity}");
-            }
-        }
-
-        /// <summary>
-        /// Print store inventory
-        /// </summary>
-        public void PrintStoreInvetory()
-        {
-            Console.WriteLine("Enter store id to print inventory:");
-            foreach (var store in locationService.GetAllLocations())
-            {
-                Console.WriteLine($"\tlocation id: {store.LocationId} \tlocations: {store.Name}  \tAddress: {store.Address}");
-            }
-            int storeId = Int32.Parse(Console.ReadLine());
-
-            Console.WriteLine("Products at selected location:");
-            foreach (var plant in inventoryService.GetInvetoryItemByLocationId(storeId))
-            {
-                if (plant.Location.LocationId == storeId)
-                    Console.WriteLine($"\tquantity: {plant.Quantity}\tName: {plant.Product.Name} ");
-            }
-        }
-
-        /// <summary>
-        ///  Prints location inventory given location id
-        /// </summary>
-        /// <param name="user"></param>
-        public void GetLocationInventory()
-        {
-            Console.WriteLine("Enter store id to print inventory:");
-            foreach (var store in locationService.GetAllLocations())
-            {
-                Console.WriteLine($"\tlocation id: {store.LocationId} \tlocations: {store.Name}  \tAddress: {store.Address}");
-            }
-            int storeId = Int32.Parse(Console.ReadLine());
-
-            Console.WriteLine("Products in inventory:");
-
-            foreach (var plant in inventoryService.GetInvetoryItemByLocationId(storeId))
-            {
-
-                if (plant.Location.LocationId == storeId)
-                    Console.WriteLine($"\tName: {plant.Product.Name} \tquantity: {plant.Quantity} ");
-            }
-            Console.WriteLine("All products inventory printed\n");
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/LocationMenu.cs b/SoilMates/SoilMatesUI/Menu/LocationMenu.cs
deleted file mode 100644
index 814cdba..0000000
--- a/SoilMates/SoilMatesUI/Menu/LocationMenu.cs
+++ /dev/null
@@ -1,75 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using SoilMatesLib;
-using Serilog;
-
-namespace SoilMatesUI.Menu
-{
-    public class LocationMenu : IMenu
-    {
-        ManagerService managerService;
-        ProductService productService;
-        LocationService locationService;
-        InventoryService inventoryService;
-        OrderService orderService;
-        IRepository repo;
-        private IMenuBL menuBL = new MenuBL();
-
-        public LocationMenu(IRepository repo)
-        {
-            this.repo = repo;
-            this.managerService = new ManagerService(repo);
-            this.productService = new ProductService(repo);
-            this.locationService = new LocationService(repo);
-            this.inventoryService = new InventoryService(repo);
-            this.orderService = new OrderService(repo);
-        }
-
-        public void Start()
-        {
-            string name, address;
-
-            Console.WriteLine("Enter location name: ");
-            name = Console.ReadLine();
-            Console.WriteLine("Enter location address");
-            address = Console.ReadLine();
-
-            try
-            {
-                locationService.AddNewLocation(name, address);
-            }
-            catch (Exception ex)
-            {
-                Log.Warning("Attempted to add existing location.");
-                Console.WriteLine(ex.Message);
-                return;
-            }
-            locationService.SaveChanges();
-            Console.WriteLine("New Location added! All locations listed below:");
-            foreach (var location in locationService.GetAllLocations())
-            {
-                Console.WriteLine($"\tlocation id: {location.LocationId} location name: {location.Name}");
-            }
-
-        }
-
-        public void OrderAtLocation()
-        {
-            Console.WriteLine("Enter store id to print inventory:");
-            foreach (var store in locationService.GetAllLocations())
-            {
-                Console.WriteLine($"\tlocation id: {store.LocationId} \tlocations: {store.Name}  \tAddress: {store.Address}");
-            }
-            int storeId = Int32.Parse(Console.ReadLine());
-
-
-            foreach (var order in orderService.GetOrderByLocatoinId(storeId))
-            {
-                Console.WriteLine($"\tOrder Id: {order.OrderId} Order Time: {order.OrderTime} Order Total Price: {order.TotalPrice}");
-            }
-            Console.WriteLine("All orders for location printed");
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/LoginMenu.cs b/SoilMates/SoilMatesUI/Menu/LoginMenu.cs
deleted file mode 100644
index c8f45bb..0000000
--- a/SoilMates/SoilMatesUI/Menu/LoginMenu.cs
+++ /dev/null
@@ -1,119 +0,0 @@
-using System;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using SoilMatesLib;
-using SoilMatesBL;
-
-namespace SoilMatesUI.Menu
-{
-    /// <summary>
-    /// Login menu class
-    /// </summary>
-    public class LoginMenu : IMenu
-    {
-        string userInput;
-        IRepository userRepo;
-        CustomerService customerService;
-        ManagerService managerService;
-        CustomerMenu customerMenu;
-        ManagerMenu managerMenu;
-        MenuBL menuBL;
-
-        /// <summary>
-        /// Login menu constructor
-        /// </summary>
-        /// <param name="userRepo"></param>
-        public LoginMenu(IRepository userRepo)
-        {
-            this.userRepo = userRepo;
-            this.customerService = new CustomerService(userRepo);
-            this.managerService = new ManagerService(userRepo);
-            this.customerMenu = new CustomerMenu(userRepo);
-            this.managerMenu = new ManagerMenu(userRepo);
-            this.menuBL = new MenuBL();
-        }
-
-        /// <summary>
-        /// Entry point for login UI
-        /// </summary>
-        public void Start()
-        {
-            bool isValidInput;
-            do
-            {
-                PrintLoginOptions();
-                userInput = Console.ReadLine();
-                isValidInput = menuBL.LoginInInputValidation(userInput);
-                switch (userInput)
-                {
-                    case "0":
-                        Customer customer = GetCustomerDetails();
-                        if (customer == null) Console.WriteLine("User Not Found");
-                        else
-                        {
-                            Console.WriteLine("Customer Login successfull\n");
-                            customerMenu.Start(customer);
-                        }
-                        break;
-                    case "1":
-                        Manager manager = GetManagerDetails();
-                        if (manager == null) Console.WriteLine("Login unsuccessfull");
-                        else
-                        {
-                            Console.WriteLine("Manager Login successfull\n");
-                            managerMenu.Start(manager);
-                        }
-                        break;
-                }
-            } while (!isValidInput || !userInput.Equals("x"));
-        }
-
-        /// <summary>
-        /// Print Menu options
-        /// </summary>
-        public void PrintLoginOptions()
-        {
-            Console.WriteLine();
-            Console.WriteLine("Select type of user: ");
-            Console.WriteLine("[0] Customer");
-            Console.WriteLine("[1] Manager");
-            Console.WriteLine("[x] exit");
-        }
-
-        /// <summary>
-        /// Gets customer details for login
-        /// </summary>
-        /// <returns></returns>
-        public Customer GetCustomerDetails()
-        {
-            string email, pw;
-            do
-            {
-                Console.WriteLine("Email: ");
-                email = Console.ReadLine().ToLower();
-                Console.WriteLine("Password: ");
-                pw = Console.ReadLine();
-            } while (!menuBL.EmailValidation(email));
-
-            return customerService.GetCustomerByLogin(pw, email);
-        }
-
-        /// <summary>
-        /// Gets manager details for login
-        /// </summary>
-        /// <returns></returns>
-        public Manager GetManagerDetails()
-        {
-            string email, pw;
-            do
-            {
-                Console.WriteLine("Enter your Email: ");
-                email = Console.ReadLine().ToLower();
-                Console.WriteLine("Enter your password: ");
-                pw = Console.ReadLine();
-            } while (!menuBL.EmailValidation(email));
-
-            return managerService.GetManagerByLogin(pw, email);
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/MainMenu.cs b/SoilMates/SoilMatesUI/Menu/MainMenu.cs
deleted file mode 100644
index bc70915..0000000
--- a/SoilMates/SoilMatesUI/Menu/MainMenu.cs
+++ /dev/null
@@ -1,56 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB;
-using Serilog;
-
-namespace SoilMatesUI.Menu
-{
-    /// <summary>
-    /// Menu for users of soilMates console application, implements IMenu
-    /// </summary>
-    public class MainMenu : IMenu
-    {
-        private string userInput;
-        private SignupMenu _signupMenu;
-        private LoginMenu _loginMenu;
-        private IMenuBL menuBL = new MenuBL();
-        private IRepository repository;
-        public MainMenu(SoilMatesContext context)
-        {
-            repository = new DBrepo(context);
-            this._loginMenu = new LoginMenu(repository);
-            this._signupMenu = new SignupMenu(repository);
-        }
-
-        /// <summary>
-        /// entry point for main menu UI
-        /// </summary>
-        public void Start()
-        {
-            Console.WriteLine("Welcome to SoilMates!");
-            Log.Verbose("Main Menu started.");
-
-            bool isValidInput;
-            do
-            {
-                Console.WriteLine("Please select a sign in option:");
-                Console.WriteLine("[0] SignUp");
-                Console.WriteLine("[1] Login");
-                Console.WriteLine("[x] Exit");
-                userInput = Console.ReadLine();
-                isValidInput = menuBL.SignInInputValidation(userInput);
-
-                switch (userInput)
-                {
-                    case "0":
-                        this._signupMenu.Start();
-                        break;
-                    case "1":
-                        this._loginMenu.Start();
-                        break;
-                }
-            } while (!isValidInput || !userInput.Equals("x"));
-        }
-    }
-}
-
diff --git a/SoilMates/SoilMatesUI/Menu/ManagerMenu.cs b/SoilMates/SoilMatesUI/Menu/ManagerMenu.cs
deleted file mode 100644
index b4cb5da..0000000
--- a/SoilMates/SoilMatesUI/Menu/ManagerMenu.cs
+++ /dev/null
@@ -1,61 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using SoilMatesLib;
-
-namespace SoilMatesUI.Menu
-{
-    public class ManagerMenu
-    {
-        IRepository repo;
-        private string userInput;
-        private IMenuBL menuBL = new MenuBL();
-        private LocationMenu locationMenu;
-
-        private AddProductMenu productMenu;
-
-        private InventoryMenu inventoryMenu;
-
-        public ManagerMenu(IRepository repo)
-        {
-            this.repo = repo;
-            this.locationMenu = new LocationMenu(repo);
-            this.productMenu = new AddProductMenu(repo);
-            this.inventoryMenu = new InventoryMenu(repo);
-        }
-
-        public void Start(Manager user)
-        {
-            Console.WriteLine();
-            bool isValidMenuItem;
-            do
-            {
-                Console.WriteLine("Hello {0}, Welcome to SoilMates Employee Portal: ", user.Name);
-                PrintManagerMenuOptions();
-                isValidMenuItem = menuBL.EmployeeMenuInputValidation(userInput); //CHANGE THIS
-
-                if (isValidMenuItem && userInput.Equals("0")) locationMenu.Start();
-                if (isValidMenuItem && userInput.Equals("1")) productMenu.Start();
-                if (isValidMenuItem && userInput.Equals("2")) inventoryMenu.AddPlantToInventory();
-                if (isValidMenuItem && userInput.Equals("3")) inventoryMenu.PrintStoreInvetory();
-                if (isValidMenuItem && userInput.Equals("4")) inventoryMenu.PrintPlantInventory();
-                if (isValidMenuItem && userInput.Equals("5")) locationMenu.OrderAtLocation();
-
-            } while (!isValidMenuItem || !userInput.Equals("x"));
-        }
-
-        public void PrintManagerMenuOptions()
-        {
-            Console.WriteLine("[0] Add location"); //TODO possibly remove but managers can add locations for now
-            Console.WriteLine("[1] Add plant to stock");
-            Console.WriteLine("[2] Add plant to Store location");
-            Console.WriteLine("[3] Print Store Inventory"); //Check products in store location
-            Console.WriteLine("[4] Print Plant Inventory");  //Check product inventory by product type
-            Console.WriteLine("[5] Print Order History By Location");
-            Console.WriteLine("[x] Exit"); //remove product
-            userInput = Console.ReadLine();
-        }
-
-    }
-}
diff --git a/SoilMates/SoilMatesUI/Menu/OrderMenu.cs b/SoilMates/SoilMatesUI/Menu/OrderMenu.cs
deleted file mode 100644
index d45c6fe..0000000
--- a/SoilMates/SoilMatesUI/Menu/OrderMenu.cs
+++ /dev/null
@@ -1,139 +0,0 @@
-using System;
-using SoilMatesBL;
-using SoilMatesDB.Models;
-using SoilMatesDB;
-using SoilMatesLib;
-using System.Collections.Generic;
-
-namespace SoilMatesUI.Menu
-{
-    public class OrderMenu : IMenu
-    {
-        OrderService orderService;
-        IRepository repo;
-        LocationService locationService;
-        InventoryService inventoryService;
-        OrderProductService orderProductService;
-        ProductService productService;
-
-
-        /// <summary>
-        /// Order menu constructor
-        /// </summary>
-        /// <param name="repo"></param>
-        public OrderMenu(IRepository repo)
-        {
-            this.repo = repo;
-            this.orderService = new OrderService(repo);
-            this.locationService = new LocationService(repo);
-            this.inventoryService = new InventoryService(repo);
-            this.orderProductService = new OrderProductService(repo);
-            this.productService = new ProductService(repo);
-        }
-
-        public void Start() { }
-
-        /// <summary>
-        /// Gets user details to retrieve order history based on price or time of order
-        /// </summary>
-        /// <param name="user"></param>
-        public void GetOrderHistory(User user)
-        {
-            Console.WriteLine("Order history by: \n[0] Date (Most recent) \n[1] Price (lowest to highest) "); // TODO
-
-            string orderBy = Console.ReadLine();
-            List<Order> _orders = orderService.GetOrderByCustomerId(user.Id);
-            if (orderBy.Equals("0"))
-            {
-                _orders.Sort((x, y) => DateTime.Compare(y.OrderTime, x.OrderTime));
-                foreach (var myOrder in _orders)
-                {
-                    Console.WriteLine($"Time of Order: {myOrder.OrderTime}  Total Purchase Price: {myOrder.TotalPrice}");
-                    foreach (var _product in myOrder.LineItem)
-                    {
-                        Console.WriteLine($"\tProduct Id: {_product.Product.ProductId} \tProduct Name: {_product.Product.Name} \tProduct Price: {_product.Product.Price}");
-                    }
-                }
-            }
-
-            if (orderBy.Equals("1"))
-            {
-                _orders.Sort((x, y) => Decimal.Compare(x.TotalPrice, y.TotalPrice));
-                foreach (var myOrder in _orders)
-                {
-                    Console.WriteLine($"Time of Order: {myOrder.OrderTime}  Total Purchase Price: {myOrder.TotalPrice}");
-                    foreach (var _product in myOrder.LineItem)
-                    {
-                        Console.WriteLine($"\tProduct Id: {_product.Product.ProductId} \tProduct Name: {_product.Product.Name} \tProduct Price: {_product.Product.Price}");
-                    }
-                }
-            }
-        }
-
-
-
-        /// <summary>
-        /// Order plant from store 
-        /// </summary>
-        /// <param name="user"></param>
-        public void OrderPlant(Customer user)
-        {
-            Console.WriteLine("Select the store to shop from by id:");
-            foreach (var store in locationService.GetAllLocations())
-            {
-                Console.WriteLine($"\tlocation id: {store.LocationId} \tlocations: {store.Name}  \tAddress: {store.Address}");
-            }
-            int storeID = Int32.Parse(Console.ReadLine());
-
-            Location customerLocation = locationService.GetLocationById(storeID);
-            List<Inventory> customerInventory = customerLocation.StoreProducts;
-
-            Order newOrder = new Order();
-            string input;
-            Decimal totalPrice = 0;
-            do
-            {
-                Console.WriteLine("Select a product by id");
-                foreach (var invetoryItem in customerInventory)
-                {
-                    if (invetoryItem.Quantity > 0)
-                    {
-                        Console.WriteLine($"\tproduct id: {invetoryItem.ProductForeingId} \tProduct name: {invetoryItem.Product.Name}  \tquantity: {invetoryItem.Quantity}");
-                    }
-                }
-
-                int productId = Int32.Parse(Console.ReadLine());
-                Product soldProduct = productService.GetProduct(productId);
-
-                Console.WriteLine("Type quantity of item to purchase:");
-                int amountItem = Int32.Parse(Console.ReadLine());
-
-                Inventory updateInventoryItem = inventoryService.GetInventoryItem(productId, storeID);
-                try
-                {
-                    inventoryService.SoldInventoryUpdate(updateInventoryItem, amountItem);
-                }
-                catch (Exception e)
-                {
-                    Console.WriteLine(e.Message);
-                    input = "c"; //user input to continue shopping
-                    continue;
-                }
-                totalPrice += (amountItem * soldProduct.Price);
-                OrderProduct itemInCart = new OrderProduct();
-                orderProductService.UpdateOrderProductInCart(itemInCart, soldProduct, newOrder);
-                orderProductService.AddOrderProduct(itemInCart);
-
-                Console.WriteLine("Press any key to continue shopping (type [x] to finish order)");
-                input = Console.ReadLine();
-
-            } while (!input.Equals("x"));
-
-            orderService.SubmitOrder(newOrder, user.Id, storeID, totalPrice);
-            Console.WriteLine("Enter shipping address:");
-            string address = Console.ReadLine();
-            newOrder.Address = address;
-            orderService.SaveChanges();
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Menu/SignupMenu.cs b/SoilMates/SoilMatesUI/Menu/SignupMenu.cs
deleted file mode 100644
index ff0ef81..0000000
--- a/SoilMates/SoilMatesUI/Menu/SignupMenu.cs
+++ /dev/null
@@ -1,123 +0,0 @@
-using System;
-using SoilMatesDB;
-using SoilMatesDB.Models;
-using SoilMatesLib;
-using SoilMatesBL;
-using Serilog;
-
-namespace SoilMatesUI.Menu
-{
-    public class SignupMenu : IMenu
-    {
-        string userInput;
-        IRepository userRepo;
-        CustomerService customerService;
-        ManagerService managerService;
-        MenuBL menuBL;
-
-        /// <summary>
-        /// Signup menu UI constructor
-        /// </summary>
-        /// <param name="repo"></param>
-        public SignupMenu(IRepository repo)
-        {
-            this.userRepo = repo;
-            this.customerService = new CustomerService(userRepo);
-            this.managerService = new ManagerService(userRepo);
-            this.menuBL = new MenuBL();
-        }
-
-        /// <summary>
-        /// Entry point for signup menu UI
-        /// </summary>
-        public void Start()
-        {
-            bool isValidInput;
-            do
-            {
-                PrintSignUpOptions();
-                userInput = Console.ReadLine();
-                isValidInput = menuBL.LoginInInputValidation(userInput);
-                switch (userInput)
-                {
-                    case "0":
-                        GetCustomerDetails();
-                        return;
-
-                    case "1":
-                        GetManagerDetails();
-                        return;
-                }
-            } while (!isValidInput || !userInput.Equals("x"));
-        }
-
-
-        /// <summary>
-        /// Print menu options
-        /// </summary>
-        public void PrintSignUpOptions()
-        {
-            Console.WriteLine();
-            Console.WriteLine("Select type of user:");
-            Console.WriteLine("[0] Customer");
-            Console.WriteLine("[1] Manager");
-            Console.WriteLine("[x] exit");
-        }
-
-        /// <summary>
-        /// Get manger details from user
-        /// </summary>
-        /// <returns></returns>
-        public void GetManagerDetails()
-        {
-            string name, email, password;
-            do
-            {
-                Console.WriteLine("Please enter your information to sign up to SoilMates");
-                Console.WriteLine("Enter your name:");
-                name = Console.ReadLine();
-                Console.WriteLine("Enter your Email: ");
-                email = Console.ReadLine().ToLower();
-                Console.WriteLine("Enter your password: ");
-                password = Console.ReadLine();
-
-            } while (!menuBL.NameValidation(name) || !menuBL.EmailValidation(email));
-
-            try
-            {
-                managerService.SignUpManager(name, email, password);
-            }
-            catch (Exception ex)
-            {
-                Console.WriteLine(ex.Message);
-            }
-        }
-
-        /// <summary>
-        /// Get customer details
-        /// </summary>
-        /// <returns></returns>
-        public void GetCustomerDetails()
-        {
-            string name, email, password;
-            do
-            {
-                Console.WriteLine("Please enter your information to sign up to SoilMates");
-                Console.WriteLine("Enter your name:");
-                name = Console.ReadLine();
-                Console.WriteLine("Enter your Email: ");
-                email = Console.ReadLine().ToLower();
-                Console.WriteLine("Enter your password: ");
-                password = Console.ReadLine();
-            } while (!menuBL.NameValidation(name) || !menuBL.EmailValidation(email));
-            try
-            {
-                customerService.SignUpCustomer(name, email, password);
-            }
-            catch (Exception ex)
-            {
-                Console.WriteLine(ex.Message);
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesUI/Program.cs b/SoilMates/SoilMatesUI/Program.cs
deleted file mode 100644
index f50ff7d..0000000
--- a/SoilMates/SoilMatesUI/Program.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-ï»¿using System;
-using SoilMatesDB;
-using SoilMatesUI.Menu;
-using Serilog;
-
-namespace SoilMatesUI
-{
-    /// <summary>
-    /// Console app for SoilMates
-    /// </summary>
-    class Program
-    {
-        static void Main(string[] args)
-        {
-            Log.Logger = new LoggerConfiguration()
-            .MinimumLevel.Verbose()
-            .WriteTo.File(@"../Log/Log.txt")
-            .CreateLogger();
-
-            IMenu menu = new MainMenu(new SoilMatesContext());
-            menu.Start();
-        }
-    }
-}
diff --git a/SoilMates/erd.vuerd b/SoilMates/erd.vuerd
deleted file mode 100644
index 1504fda..0000000
--- a/SoilMates/erd.vuerd
+++ /dev/null
@@ -1,959 +0,0 @@
-{
-  "canvas": {
-    "width": 2000,
-    "height": 2000,
-    "scrollTop": 840,
-    "scrollLeft": 0,
-    "show": {
-      "tableComment": true,
-      "columnComment": true,
-      "columnDataType": true,
-      "columnDefault": true,
-      "columnAutoIncrement": false,
-      "columnPrimaryKey": true,
-      "columnUnique": false,
-      "columnNotNull": true,
-      "relationship": true
-    },
-    "database": "MySQL",
-    "databaseName": "SoilMates",
-    "canvasType": "ERD",
-    "language": "GraphQL",
-    "tableCase": "pascalCase",
-    "columnCase": "camelCase",
-    "setting": {
-      "relationshipDataTypeSync": true,
-      "columnOrder": [
-        "columnName",
-        "columnDataType",
-        "columnNotNull",
-        "columnUnique",
-        "columnAutoIncrement",
-        "columnDefault",
-        "columnComment"
-      ]
-    }
-  },
-  "table": {
-    "tables": [
-      {
-        "name": "Managers",
-        "comment": "",
-        "columns": [
-          {
-            "name": "Id",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "6c5d9f7f-adce-1bf2-b96e-e905f401bd31"
-          },
-          {
-            "name": "UserType",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "43da752c-b99e-c4bf-e1fe-554bd417dc3a"
-          },
-          {
-            "name": "Name",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "efa3b105-d8f1-3324-6b50-71aa771b7cb8"
-          },
-          {
-            "name": "Email",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "bc7c5b14-24f4-9d00-c4e9-b3c6803875ef"
-          },
-          {
-            "name": "Password",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "c3c6dbac-2007-4f68-a554-7a78f234dec9"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 679,
-          "top": 1540,
-          "zIndex": 371,
-          "widthName": 60,
-          "widthComment": 60
-        },
-        "id": "c856f541-c9da-c7b9-61cc-b324f56d5d0c"
-      },
-      {
-        "name": "Customers",
-        "comment": "",
-        "columns": [
-          {
-            "name": "Id",
-            "comment": "PK",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "9890c7c3-a326-822c-79c4-9f55830ef15e"
-          },
-          {
-            "name": "UserType",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "a7dd71ab-832e-bb9c-24e6-79fe3c7cc14b"
-          },
-          {
-            "name": "Name",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "f9548fc3-de03-5b49-d89d-b3ef72bc7a43"
-          },
-          {
-            "name": "Email",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "04be852b-ba9f-3c62-ac21-1bd880107958"
-          },
-          {
-            "name": "Password",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "8bb730e1-1692-a266-9dc8-77b9e42337c2"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 182,
-          "top": 992,
-          "zIndex": 364,
-          "widthName": 65,
-          "widthComment": 60
-        },
-        "id": "7edb09d8-9e96-12c7-77da-8c066b6d2f8d"
-      },
-      {
-        "name": "Inventories",
-        "comment": "",
-        "columns": [
-          {
-            "name": "InventoryId",
-            "comment": "PK",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 66,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "393830bc-48f5-1e13-98fa-2357539cd5a8"
-          },
-          {
-            "name": "Quantity",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "a3d0068e-960c-160b-384a-473db02bf40a"
-          },
-          {
-            "name": "ProductForeignId",
-            "comment": "FK",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": true,
-              "pfk": false,
-              "widthName": 102,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "399226d0-9aa7-afe1-681c-30ec2d101360"
-          },
-          {
-            "name": "LocationForgeinId",
-            "comment": "FK",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": true,
-              "pfk": false,
-              "widthName": 106,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "e7631aab-6ff0-a74c-03f8-079f30489f01"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 169,
-          "top": 1219,
-          "zIndex": 363,
-          "widthName": 66,
-          "widthComment": 60
-        },
-        "id": "a3ceccbd-148f-ac3c-dd30-437d8ed6c055"
-      },
-      {
-        "name": "Locations",
-        "comment": "",
-        "columns": [
-          {
-            "name": "LocationId",
-            "comment": "PK",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 62,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "ce6376e1-3f0d-b109-b262-315393d8f2c7"
-          },
-          {
-            "name": "Address",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "55f49911-268f-5a96-bd66-f24018dde9ea"
-          },
-          {
-            "name": "Name",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "25be8255-9616-707d-ee7d-9f12cb53da69"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 193,
-          "top": 1544,
-          "zIndex": 356,
-          "widthName": 60,
-          "widthComment": 60
-        },
-        "id": "6badeb91-2abc-6430-8c1e-4898c6e1e92b"
-      },
-      {
-        "name": "OrderProducts",
-        "comment": "Line Items for order",
-        "columns": [
-          {
-            "name": "Id",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "2312e1bf-0688-9792-23a4-44043aa351c3"
-          },
-          {
-            "name": "ProductForiegnId",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": true,
-              "pfk": false,
-              "widthName": 102,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "1d69b225-3a22-7e88-ffee-3b8789e3dc8c"
-          },
-          {
-            "name": "OrderForiegnId",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": true,
-              "pfk": false,
-              "widthName": 90,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "ee51c51f-5ad6-6f40-443d-228956bfd1f9"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 1190,
-          "top": 1240,
-          "zIndex": 373,
-          "widthName": 87,
-          "widthComment": 115
-        },
-        "id": "ca11d058-cf05-63db-ee32-8c061e169a01"
-      },
-      {
-        "name": "Orders",
-        "comment": "",
-        "columns": [
-          {
-            "name": "OrderId",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "fa4b437e-5c57-c2cb-6c8a-89807a341947"
-          },
-          {
-            "name": "CustomerId",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": true,
-              "pfk": false,
-              "widthName": 69,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "9d20d3fc-696c-a33b-643d-4b60a619194f"
-          },
-          {
-            "name": "Address",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "0e52e440-39df-3712-1174-11918025a2ce"
-          },
-          {
-            "name": "OrderTime",
-            "comment": "",
-            "dataType": "TIMESTAMP",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 64,
-              "widthComment": 60,
-              "widthDataType": 77,
-              "widthDefault": 60
-            },
-            "id": "fae9452e-20e8-b595-896e-010b36363b60"
-          },
-          {
-            "name": "TotalPrice",
-            "comment": "",
-            "dataType": "NUMERIC",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 63,
-              "widthDefault": 60
-            },
-            "id": "7e8f5056-3c7e-bf36-f555-5b05986bcc2c"
-          },
-          {
-            "name": "LocationId",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 62,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "53b73574-de21-0fc2-e3c3-b17087036e2d"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 698,
-          "top": 1034,
-          "zIndex": 365,
-          "widthName": 60,
-          "widthComment": 60
-        },
-        "id": "136e622d-dc1d-ba00-3472-2e5f41ec5b02"
-      },
-      {
-        "name": "Products",
-        "comment": "",
-        "columns": [
-          {
-            "name": "ProductId",
-            "comment": "",
-            "dataType": "INT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": true,
-              "unique": false,
-              "notNull": true
-            },
-            "ui": {
-              "active": false,
-              "pk": true,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "0923ac65-0281-e77c-9dbb-4089ca423d8f"
-          },
-          {
-            "name": "Description",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 67,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "450b8400-fcaa-d433-90fd-8515fce42b51"
-          },
-          {
-            "name": "Name",
-            "comment": "",
-            "dataType": "TEXT",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 60,
-              "widthDefault": 60
-            },
-            "id": "e5466039-0da1-5dfa-17b9-b9d296d364ad"
-          },
-          {
-            "name": "Price",
-            "comment": "",
-            "dataType": "NUMERIC",
-            "default": "",
-            "option": {
-              "autoIncrement": false,
-              "primaryKey": false,
-              "unique": false,
-              "notNull": false
-            },
-            "ui": {
-              "active": false,
-              "pk": false,
-              "fk": false,
-              "pfk": false,
-              "widthName": 60,
-              "widthComment": 60,
-              "widthDataType": 63,
-              "widthDefault": 60
-            },
-            "id": "8a2d8ffc-cb91-6c6a-63ae-958b632bddfd"
-          }
-        ],
-        "ui": {
-          "active": false,
-          "left": 687,
-          "top": 1307,
-          "zIndex": 366,
-          "widthName": 60,
-          "widthComment": 60
-        },
-        "id": "e2eeb847-0072-b1a6-f9ea-0b02739511b6"
-      }
-    ],
-    "indexes": []
-  },
-  "memo": {
-    "memos": []
-  },
-  "relationship": {
-    "relationships": [
-      {
-        "identification": false,
-        "start": {
-          "tableId": "7edb09d8-9e96-12c7-77da-8c066b6d2f8d",
-          "columnIds": [
-            "9890c7c3-a326-822c-79c4-9f55830ef15e"
-          ],
-          "x": 529,
-          "y": 1077.75,
-          "direction": "right"
-        },
-        "end": {
-          "tableId": "136e622d-dc1d-ba00-3472-2e5f41ec5b02",
-          "columnIds": [
-            "9d20d3fc-696c-a33b-643d-4b60a619194f"
-          ],
-          "x": 698,
-          "y": 1130,
-          "direction": "left"
-        },
-        "id": "762a4a39-f899-1dd3-6c11-37416686f54f",
-        "relationshipType": "ZeroN"
-      },
-      {
-        "identification": false,
-        "start": {
-          "tableId": "e2eeb847-0072-b1a6-f9ea-0b02739511b6",
-          "columnIds": [
-            "0923ac65-0281-e77c-9dbb-4089ca423d8f"
-          ],
-          "x": 1044,
-          "y": 1382.5,
-          "direction": "right"
-        },
-        "end": {
-          "tableId": "ca11d058-cf05-63db-ee32-8c061e169a01",
-          "columnIds": [
-            "1d69b225-3a22-7e88-ffee-3b8789e3dc8c"
-          ],
-          "x": 1190,
-          "y": 1337.875,
-          "direction": "left"
-        },
-        "id": "d1d628ca-ce1b-48d1-2f9c-ccbabd66f4e4",
-        "relationshipType": "One"
-      },
-      {
-        "identification": false,
-        "start": {
-          "tableId": "136e622d-dc1d-ba00-3472-2e5f41ec5b02",
-          "columnIds": [
-            "fa4b437e-5c57-c2cb-6c8a-89807a341947"
-          ],
-          "x": 1071,
-          "y": 1130,
-          "direction": "right"
-        },
-        "end": {
-          "tableId": "ca11d058-cf05-63db-ee32-8c061e169a01",
-          "columnIds": [
-            "ee51c51f-5ad6-6f40-443d-228956bfd1f9"
-          ],
-          "x": 1190,
-          "y": 1272.625,
-          "direction": "left"
-        },
-        "id": "39c6bd26-a5c5-d382-ffb8-efbf32290b71",
-        "relationshipType": "One"
-      },
-      {
-        "identification": false,
-        "start": {
-          "tableId": "e2eeb847-0072-b1a6-f9ea-0b02739511b6",
-          "columnIds": [
-            "0923ac65-0281-e77c-9dbb-4089ca423d8f"
-          ],
-          "x": 687,
-          "y": 1382.5,
-          "direction": "left"
-        },
-        "end": {
-          "tableId": "a3ceccbd-148f-ac3c-dd30-437d8ed6c055",
-          "columnIds": [
-            "399226d0-9aa7-afe1-681c-30ec2d101360"
-          ],
-          "x": 562,
-          "y": 1294.5,
-          "direction": "right"
-        },
-        "id": "c4ec7bc1-0b7a-b58d-1818-faa99c90aa08",
-        "relationshipType": "ZeroOne"
-      },
-      {
-        "identification": false,
-        "start": {
-          "tableId": "6badeb91-2abc-6430-8c1e-4898c6e1e92b",
-          "columnIds": [
-            "ce6376e1-3f0d-b109-b262-315393d8f2c7"
-          ],
-          "x": 367.5,
-          "y": 1544,
-          "direction": "top"
-        },
-        "end": {
-          "tableId": "a3ceccbd-148f-ac3c-dd30-437d8ed6c055",
-          "columnIds": [
-            "e7631aab-6ff0-a74c-03f8-079f30489f01"
-          ],
-          "x": 365.5,
-          "y": 1370,
-          "direction": "bottom"
-        },
-        "id": "6b95c0b1-6a18-961b-ade5-df551eac7183",
-        "relationshipType": "One"
-      }
-    ]
-  }
-}
\ No newline at end of file
diff --git a/SoilMates/.vscode/launch.json b/TeaStoreApp/.vscode/launch.json
similarity index 77%
rename from SoilMates/.vscode/launch.json
rename to TeaStoreApp/.vscode/launch.json
index e532555..728d3f8 100644
--- a/SoilMates/.vscode/launch.json
+++ b/TeaStoreApp/.vscode/launch.json
@@ -9,10 +9,10 @@
             "type": "coreclr",
             "request": "launch",
             "preLaunchTask": "build",
-            "program": "${workspaceFolder}/SoilMatesUI/bin/Debug/netcoreapp3.1/SoilMatesUI.dll",
+            "program": "${workspaceFolder}/TeaUI/bin/Debug/netcoreapp3.1/TeaUI.dll",
             "args": [],
-            "cwd": "${workspaceFolder}/SoilMatesUI",
-            "console": "integratedTerminal",
+            "cwd": "${workspaceFolder}/TeaUI",
+            "console": "internalConsole",
             "stopAtEntry": false
         },
         {
diff --git a/SoilMates/.vscode/tasks.json b/TeaStoreApp/.vscode/tasks.json
similarity index 83%
rename from SoilMates/.vscode/tasks.json
rename to TeaStoreApp/.vscode/tasks.json
index fa8fb6d..24b3ec7 100644
--- a/SoilMates/.vscode/tasks.json
+++ b/TeaStoreApp/.vscode/tasks.json
@@ -7,7 +7,7 @@
             "type": "process",
             "args": [
                 "build",
-                "${workspaceFolder}/SoilMatesUI/SoilMatesUI.csproj",
+                "${workspaceFolder}/TeaUI/TeaUI.csproj",
                 "/property:GenerateFullPaths=true",
                 "/consoleloggerparameters:NoSummary"
             ],
@@ -19,7 +19,7 @@
             "type": "process",
             "args": [
                 "publish",
-                "${workspaceFolder}/SoilMatesUI/SoilMatesUI.csproj",
+                "${workspaceFolder}/TeaUI/TeaUI.csproj",
                 "/property:GenerateFullPaths=true",
                 "/consoleloggerparameters:NoSummary"
             ],
@@ -32,7 +32,7 @@
             "args": [
                 "watch",
                 "run",
-                "${workspaceFolder}/SoilMatesUI/SoilMatesUI.csproj",
+                "${workspaceFolder}/TeaUI/TeaUI.csproj",
                 "/property:GenerateFullPaths=true",
                 "/consoleloggerparameters:NoSummary"
             ],
diff --git a/TeaStoreApp/P0-ERDiagram.png b/TeaStoreApp/P0-ERDiagram.png
new file mode 100644
index 0000000..24dd607
Binary files /dev/null and b/TeaStoreApp/P0-ERDiagram.png differ
diff --git a/TeaStoreApp/Tea.sql b/TeaStoreApp/Tea.sql
new file mode 100644
index 0000000..53b9a6e
--- /dev/null
+++ b/TeaStoreApp/Tea.sql
@@ -0,0 +1,154 @@
+-- drop table orderitems;
+-- drop table orders;
+-- drop table customers;
+-- drop table inventory;
+-- drop table locations;
+-- drop table products;
+
+
+
+CREATE TABLE Products (
+    productId serial primary key,
+    productName varchar(20) not null,
+	numberOfTeaBags int,
+    price DECIMAL(10,2),
+	description varchar(250) not null
+);
+
+CREATE TABLE Customers (
+    customerId serial primary key,
+	customerFirstName varchar(100) not null,
+	customerLastName varchar(100) not null,
+	customerEmail varchar(100)
+);
+
+create table Locations
+(
+	locationId serial primary key,
+	city varchar(20),
+	stateAcronym varchar(2)
+);
+
+CREATE TABLE Inventory (
+	id serial primary key,
+	locationId int references locations (locationId),
+    productId int references products (productId),
+    stock int
+);
+
+CREATE TABLE Orders (
+	orderId serial primary key,
+	customerId int references Customers (customerid),
+	locationId int references Locations (locationid),
+	totalPrice Decimal(10,2),
+	payed bool
+);
+
+Create Table OrderItems (
+	orderItemsId serial primary key,
+	orderId int REFERENCES Orders (orderId),
+	productId int references Products (productId),
+	amount int,
+	totalPrice Decimal(10,2)
+ 
+);
+
+Insert into Products (productName,numberOfTeaBags, price, description) values 
+('Chamomile', 16, 4.99, 'Hibiscus Tea is made from the colorful flowers of the hibiscus plant. It has a pink-red color and refreshing, tart flavor. It can be enjoyed hot or iced.'),
+('Chrysanthemum', 10, 11.99, 'Treats respiratory problems, high blood pressure, and hyperthyroidism.'),
+('Peppermint', 15, 5.99, 'Peppermint Tea is mostly used to support digestive tract health, it also has antioxidant, anticancer, antibacterial and antiviral properties.'),
+('Ginger', 16, 4.99, 'Ginger tea is a spicy and flavorful drink that packs a punch of healthy, disease-fighting antioxidants.'),
+('Lemon Balm',15,4.99,'Lemon balm tea has a light, lemony flavor and seems to have health-promoting properties.'),
+('Rose Hip',15,4.99, 'Rose hip tea is made from the fruit of the rose plant. It is high in vitamin C and beneficial plant compounds.'),
+('Sage',16,4.99, 'Sage tea is well known for its medicinal properties, and scientific research has begun to support several of its health benefits, especially for brain health.'),
+
+('Earl Grey', 20, 7.99, 'Earl Grey tea is a tea blend which has been flavoured with the addition of oil of bergamot.'),
+('Lapsang Souchong', 20, 5.99, 'Lapsang Souchong is a black tea consisting of Camellia sinensis leaves that are smoke-dried over a pinewood fire.'),
+('Masala Chai', 20, 8.99, 'Masala chai is a tea beverage made by boiling black tea in milk and water with a mixture of aromatic herbs and spices.'),
+('Darjeeling', 20, 6.99, 'Darjeeling tea is a tea made from Camellia sinensis that is grown and processed in the Darjeeling or Kalimpong Districts in West Bengal, India.'),
+('Assam', 20, 5.99, 'Assam tea is named after the region of its production, Assam, India, and is manufactured specifically from the plant Camellia sinensis var. assamica.'),
+('Yunnan Black', 15, 7.99, 'Yunnan black tea, also known as âDianhongâ is a fully oxidised tea grown high in the mountainous region of Lincang between 1680-1900 metres above sea level.'),
+('Keemun Black', 10, 6.99, 'Keemun black teas are known for their aromatic fragrance, mellow flavor and beautiful aesthetic value as well as the brilliant red liquor the brewed tea leaves produce.'),
+
+('Matcha', 15, 5.99, 'Matcha is a Japanese green tea powder made from finely powdered dried tea leaves.'),
+('Genmaicha',15,7.99,'Genmaicha is a Japanese brown rice green tea consisting of green tea mixed with roasted popped brown rice.'),
+('White Peony',16, 6.99, 'White Peony (known as Bai Mudan) is a type of white tea made from plucks each with one leaf shoot and two immediate young leaves of the camellia sinensis plant.'),
+('Silver Needle', 5, 11.99, 'Silver Needle tea is perfect for improving digestion, especially for when you feel stomach cramps or nausea.');
+
+
+insert into Customers (customerFirstName, customerLastName, customerEmail) values
+('Shalei', 'Kumar', 'Manager123@gmail.com'),
+('Vivian', 'Yu', 'vyu1234@gmail.com'),
+('Laramie', 'Cole', 'lacol23@yahoo.com'),
+('Sonia', 'Nemani', 'discodancer72@aol.com');
+
+
+Insert into Locations (city, stateAcronym) values 
+('Albany', 'NY'),
+('Buffalo', 'NY'),
+('Syracuse','NY');
+
+insert into Inventory (locationId, productId, stock) values
+(1,1,10),
+(1,2,19),
+(1,3,18),
+(1,4,10),
+(1,5,19),
+(1,6,10),
+(1,7,19),
+(1,8,14),
+(1,9,13),
+(1,10,15),
+(1,11,13),
+(1,12,19),
+(1,13,18),
+(1,14,17),
+(1,15,12),
+(1,16,14),
+(1,17,17),
+(1,18,15),
+
+(2,1,8),
+(2,2,14),
+(2,3,13),
+(2,4,19),
+(2,5,17),
+(2,6,18),
+(2,7,12),
+(2,8,13),
+(2,10,16),
+(2,11,15),
+(2,15,17),
+(2,17,19),
+
+(3,1,17),
+(3,2,18),
+(3,3,19),
+(3,4,13),
+(3,5,11),
+(3,6,12),
+(3,7,12),
+(3,8,12),
+(3,10,17),
+(3,11,13),
+(3,13,15),
+(3,15,13),
+(3,16,19),
+(3,17,15),
+(3,18,17);
+
+
+insert into Orders (customerId, locationId, totalPrice,	payed) values 
+(2,3,14.98,false);
+
+insert into orderItems (orderId,productId,amount,totalPrice) values
+(1,15,1,5.99),
+(1,10,1,8.99);
+
+alter table orders disable trigger all;
+
+ALTER TABLE orders 
+    action [, ... ]
+select * from orders
+
+
diff --git a/TeaStoreApp/TeaDB/DBMapper.cs b/TeaStoreApp/TeaDB/DBMapper.cs
new file mode 100644
index 0000000..357a6bf
--- /dev/null
+++ b/TeaStoreApp/TeaDB/DBMapper.cs
@@ -0,0 +1,265 @@
+using System;
+using System.Collections.Generic;
+using TeaDB.Entities;
+using TeaDB.Models;
+using TeaDB.IMappers;
+
+namespace TeaDB
+{
+    /// <summary>
+    /// Mapping Entities to Models and vice versa
+    /// </summary>
+    public class DBMapper : IMapper
+    {
+        public Customers ParseCustomer(CustomerModel customer)
+        {
+            return new Customers(){
+                Customerfirstname = customer.firstName,
+                Customerlastname = customer.lastName,
+                Customeremail = customer.email
+            };
+        }
+
+        public ICollection<Customers> ParseCustomer(List<CustomerModel> customer)
+        {
+            ICollection<Customers> customers = new List<Customers>();
+            foreach (var c in customer){
+                customers.Add(ParseCustomer(c));
+            }
+            return customers;
+        }
+
+        public CustomerModel ParseCustomer(Customers customer)
+        {
+            return new CustomerModel(){
+                id = customer.Customerid,
+                firstName = customer.Customerfirstname,
+                lastName = customer.Customerlastname,
+                email = customer.Customeremail
+            };
+        }
+
+        public List<CustomerModel> ParseCustomer(ICollection<Customers> customer)
+        {
+            List<CustomerModel> customers = new List<CustomerModel>();
+            foreach (var c in customer){
+                customers.Add(ParseCustomer(c));
+            }
+            return customers;
+        }
+
+        public Inventory ParseInventory(InventoryModel inventory)
+        {
+            return new Inventory(){
+                Locationid = inventory.locationId,
+                Productid = inventory.productId,
+                Stock = inventory.stock
+            };
+        }
+
+        public ICollection<Inventory> ParseInventory(List<InventoryModel> inventory)
+        {
+            ICollection<Inventory> inventories = new List<Inventory>();
+            foreach (var i in inventory){
+
+                inventories.Add(ParseInventory(i));
+            }
+            return inventories;
+        }
+
+        public InventoryModel ParseInventory(Inventory inventorys)
+        {
+            return new InventoryModel(){
+                id = inventorys.Id,
+                locationId = Convert.ToInt32(inventorys.Locationid),
+                productId = Convert.ToInt32(inventorys.Productid),
+                stock = Convert.ToInt32(inventorys.Stock)
+            };
+        }
+
+        public List<InventoryModel> ParseInventory(ICollection<Inventory> inventorys)
+        {
+            List<InventoryModel> inventory = new List<InventoryModel>();
+            foreach (var i in inventorys){
+                inventory.Add(ParseInventory(i));
+            }
+            return inventory;
+        }
+
+        public Locations ParseLocation(LocationModel location)
+        {
+            return new Locations(){
+                City = location.city,
+                Stateacronym = location.state
+            };
+        }
+
+        public ICollection<Locations> ParseLocation(List<LocationModel> location)
+        {
+            ICollection<Locations> locations = new List<Locations>();
+            foreach (var l in location){
+
+                locations.Add(ParseLocation(l));
+            }
+            return locations;
+        }
+
+        public LocationModel ParseLocation(Locations locations)
+        {
+            return new LocationModel(){
+                id = locations.Locationid,
+                city = locations.City,
+                state = locations.Stateacronym
+            };
+        }
+
+        public List<LocationModel> ParseLocation(ICollection<Locations> locations)
+        {
+            List<LocationModel> location = new List<LocationModel>();
+            foreach (var l in locations){
+                location.Add(ParseLocation(l));
+            }
+            return location;
+        }
+
+
+
+
+
+
+
+
+        public Orders ParseOrder(OrderModel order)
+        {
+            return new Orders(){
+                Customerid = order.customerId,
+                Locationid = order.locationId,
+                Totalprice = order.totalPrice,
+                Payed = order.complete
+            };
+        }
+
+        
+
+        public ICollection<Orders> ParseOrder(List<OrderModel> order)
+        {
+            ICollection<Orders> orders = new List<Orders>();
+            foreach (var o in order){
+
+                orders.Add(ParseOrder(o));
+            }
+            return orders;
+        }
+
+        public OrderModel ParseOrder(Orders orders)
+        {
+            return new OrderModel(){
+                id = orders.Orderid,
+                customerId = Convert.ToInt32(orders.Customerid),
+                locationId = Convert.ToInt32(orders.Locationid),
+                totalPrice = Convert.ToDecimal(orders.Totalprice),
+                complete = Convert.ToBoolean(orders.Payed)
+
+            };
+        }
+
+        public List<OrderModel> ParseOrder(ICollection<Orders> orders)
+        {
+            List<OrderModel> order = new List<OrderModel>();
+            foreach (var o in orders){
+                order.Add(ParseOrder(o));
+            }
+            return order;
+        }
+
+
+
+
+
+
+
+
+
+
+        public Orderitems ParseOrderItem(OrderItemModel orderItem)
+        {
+            return new Orderitems(){
+                Orderid = orderItem.orderId,
+                Productid = orderItem.productId,
+                Amount = orderItem.amount,
+                Totalprice = orderItem.totalPrice
+            };
+        }
+
+        public ICollection<Orderitems> ParseOrderItem(List<OrderItemModel> orderItem)
+        {
+            ICollection<Orderitems> orderItems = new List<Orderitems>();
+            foreach (var o in orderItem){
+
+                orderItems.Add(ParseOrderItem(o));
+            }
+            return orderItems;
+        }
+
+        public OrderItemModel ParseOrderItem(Orderitems ordertimes)
+        {
+            return new OrderItemModel(){
+                orderItemId = ordertimes.Orderitemsid,
+                orderId = Convert.ToInt32(ordertimes.Orderid),
+                productId = Convert.ToInt32(ordertimes.Productid),
+                amount = Convert.ToInt32(ordertimes.Amount),
+                totalPrice = Convert.ToDecimal(ordertimes.Totalprice)
+            };
+        }
+
+        public List<OrderItemModel> ParseOrderItem(ICollection<Orderitems> orderlist)
+        {
+            List<OrderItemModel> orderlists = new List<OrderItemModel>();
+            foreach (var o in orderlist){
+                orderlists.Add(ParseOrderItem(o));
+            }
+            return orderlists;
+        }
+
+        public Products ParseProduct(ProductModel product)
+        {
+            return new Products(){
+
+                Productname = product.name,
+                Numberofteabags = product.numberOfTeaBags,
+                Price = product.price,
+                Description = product.description
+            };
+        }
+
+        public ICollection<Products> ParseProduct(List<ProductModel> product)
+        {
+            ICollection<Products> products = new List<Products>();
+            foreach (var p in product){
+
+                products.Add(ParseProduct(p));
+            }
+            return products;
+        }
+
+        public ProductModel ParseProduct(Products products)
+        {
+            return new ProductModel(){
+                id = products.Productid,
+                name = products.Productname,
+                numberOfTeaBags = Convert.ToInt32(products.Numberofteabags),
+                price = Convert.ToDecimal(products.Price),
+                description = products.Description
+            };
+        }
+
+        public List<ProductModel> ParseProduct(ICollection<Products> products)
+        {
+            List<ProductModel> product = new List<ProductModel>();
+            foreach (var p in products){
+                product.Add(ParseProduct(p));
+            }
+            return product;
+        }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/DBRepo.cs b/TeaStoreApp/TeaDB/DBRepo.cs
new file mode 100644
index 0000000..5755bcd
--- /dev/null
+++ b/TeaStoreApp/TeaDB/DBRepo.cs
@@ -0,0 +1,277 @@
+using System.Collections.Generic;
+using TeaDB.Entities;
+using TeaDB.Models;
+using TeaDB.IMappers;
+using TeaDB.IRepo;
+using System.Linq;
+using System;
+
+namespace TeaDB
+{
+    /// <summary>
+    /// Data Access Logic
+    /// </summary>
+    public class DBRepo : IMainMenuRepo, IManagerRepo, ILocationRepo, IOrderRepo
+
+    {
+        public  TeaContext context {get;set;}
+        public  IMapper mapper {get;set;}
+        public DBRepo(){
+            this.context = new TeaContext();
+            this.mapper = new DBMapper();
+        }
+
+
+
+
+        public void NewCustomerAsync(CustomerModel customer)
+        {
+            context.Customers.Add(mapper.ParseCustomer(customer));
+            context.SaveChanges();
+        }
+
+        public CustomerModel GetCustomerInfo(string email)
+        {
+            try{
+                return mapper.ParseCustomer(
+                    context.Customers
+                    .First(c => c.Customeremail == email)
+                );
+            }
+            catch(InvalidOperationException){
+                System.Console.WriteLine("No account with that email was found");
+            }
+            return null;
+        }
+
+        public List<OrderModel> GetOrderHistory(CustomerModel customer)
+        {
+            try{
+                return mapper.ParseOrder(
+                    context.Orders
+                    .Where(c => c.Customerid == customer.id && c.Payed == true)
+                    .ToList()
+                );
+            }
+            catch (System.InvalidOperationException){
+                return null;
+            }
+        }
+
+        public List<OrderModel> GetOrderHistoryByMostExpensive(CustomerModel customer){
+        
+            try{
+                return mapper.ParseOrder(
+                    context.Orders
+                    .Where(c => c.Customerid == customer.id && c.Payed == true)
+                    .OrderByDescending(c => c.Totalprice)
+                    .ToList()
+                );
+            }
+            catch (System.InvalidOperationException){
+                return null;
+            }
+        }
+
+
+        public List<OrderModel> GetOrderHistoryByLeastExpensive(CustomerModel customer){
+            try{
+                return mapper.ParseOrder(
+                    context.Orders
+                    .Where(c => c.Customerid == customer.id && c.Payed == true)
+                    .OrderBy(c => c.Totalprice)
+                    .ToList()
+                );
+            }
+            catch (System.InvalidOperationException){
+                return null;
+            }
+        }
+
+        public List<OrderItemModel> GetOrderItems(int orderid){
+            return mapper.ParseOrderItem(
+                context.Orderitems
+                .Where(o => o.Orderid == orderid)
+                .ToList()
+            );
+        }
+
+       
+            
+
+        public void ReplenishStock(int locationid, int productid, int amount)
+        {
+            
+            context.Inventory.First(i => i.Locationid == locationid && i.Productid==productid).Stock += amount;
+           
+            context.SaveChanges();           
+        }
+
+
+
+
+
+        public LocationModel GetLocation(int id){
+            return mapper.ParseLocation(
+                context.Locations
+                .First(l => l.Locationid == id)
+            );
+        }
+
+        public List<OrderModel> GetLocationOrderHistory(int x)
+        {
+            return mapper.ParseOrder(
+                context.Orders
+                .Where(i => i.Locationid == x)
+                .ToList()
+            );
+        }
+
+
+        public List<InventoryModel> GetLocationInventory(int x)
+        {
+            return mapper.ParseInventory(
+                context.Inventory
+                .Where(i => i.Locationid == x)
+                .OrderBy(i => i.Productid)
+                .ToList()
+            );
+        }
+
+
+
+
+
+
+
+        public void NewOrder(OrderModel order)
+        {
+            
+            context.Orders.Add(mapper.ParseOrder(order));
+            context.SaveChanges();
+        }
+
+        public OrderModel GetCurrentOrder(int customerid, int locationid){
+            return mapper.ParseOrder(
+                context.Orders
+                .First(o => o.Customerid == customerid && o.Locationid == locationid)
+            );
+        }
+
+        public void DecreaseStock(int locationid, int productid, int stock){
+            
+            var inventory = context.Inventory.First(i => i.Locationid == locationid && i.Productid == productid);
+            inventory.Stock = inventory.Stock -stock;
+            context.SaveChanges();
+        }
+
+        
+        public void AddProductToOrderItem(OrderItemModel order)
+        {
+            context.Orderitems.Add(mapper.ParseOrderItem(order));
+            context.SaveChanges();
+        }
+
+        public void DeleteProductFromOrderItem(int orderid, int productid)
+        {
+            context.Orderitems.Remove(
+                context.Orderitems
+                .First(o => o.Productid == productid && o.Orderid == orderid)
+            );
+            
+            context.SaveChanges();
+        }
+
+        
+        public List<OrderItemModel> GetItemsInBasket(int orderid){
+            return mapper.ParseOrderItem(
+                context.Orderitems
+                .Where(i => i.Orderid == orderid)
+                .ToList()
+            );
+        }
+
+        
+
+        public void DeleteOrder(int id)
+        {
+            context.Orders.Remove(context.Orders.First(o => o.Orderid == id));
+            context.SaveChanges();
+        }
+
+        
+        
+        public int GetOrderId(CustomerModel customer, int locationId){
+            try{
+                var order =  mapper.ParseOrder(
+                    context.Orders
+                    .Where(o => o.Customerid == customer.id)
+                    .First(o => o.Locationid == locationId && o.Payed == false)
+                );
+                return order.id;
+            }
+            catch(System.InvalidOperationException){
+                return -1;
+            }
+        }
+
+        
+
+
+
+        public void PlaceOrder(OrderModel order){
+            context.Orders.First(i => i.Orderid == order.id).Payed = true;
+
+            context.SaveChanges();
+        }
+
+
+
+
+       
+        
+
+        public void ChangeOrderTotalPrice(int orderid, decimal amount)
+        {
+            context.Orders.First(i => i.Orderid == orderid).Totalprice += amount;
+            context.SaveChanges();
+        }
+
+
+
+        public ProductModel GetProduct(int productid){
+            return mapper.ParseProduct(
+                context.Products
+                .First(p => p.Productid == productid)
+            );
+        }
+
+       
+        
+
+        public List<OrderModel> GetOrderHistoryLocationByMostExpensive(int locationid){
+            return mapper.ParseOrder(
+                context.Orders
+                .Where(o => o.Locationid == locationid)
+                .OrderBy(o => o.Totalprice)
+                .ToList()
+            );
+
+        }
+        public List<OrderModel> GetOrderHistoryLocationByLeastExpensive(int locationid){
+            try{
+                return mapper.ParseOrder(
+                    context.Orders
+                    .Where(o => o.Locationid == locationid)
+                    .OrderByDescending(o => o.Totalprice)
+                    .ToList()
+                );
+            }
+            catch(NullReferenceException){
+                return null;
+            }
+        }
+    
+
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Entities/Customers.cs b/TeaStoreApp/TeaDB/Entities/Customers.cs
new file mode 100644
index 0000000..ccdad06
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/Customers.cs
@@ -0,0 +1,20 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class Customers
+    {
+        public Customers()
+        {
+            Orders = new HashSet<Orders>();
+        }
+
+        public int Customerid { get; set; }
+        public string Customerfirstname { get; set; }
+        public string Customerlastname { get; set; }
+        public string Customeremail { get; set; }
+
+        public virtual ICollection<Orders> Orders { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/Inventory.cs b/TeaStoreApp/TeaDB/Entities/Inventory.cs
new file mode 100644
index 0000000..9919968
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/Inventory.cs
@@ -0,0 +1,16 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class Inventory
+    {
+        public int Id { get; set; }
+        public int? Locationid { get; set; }
+        public int? Productid { get; set; }
+        public int? Stock { get; set; }
+
+        public virtual Locations Location { get; set; }
+        public virtual Products Product { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/Locations.cs b/TeaStoreApp/TeaDB/Entities/Locations.cs
new file mode 100644
index 0000000..7a03392
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/Locations.cs
@@ -0,0 +1,21 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class Locations
+    {
+        public Locations()
+        {
+            Inventory = new HashSet<Inventory>();
+            Orders = new HashSet<Orders>();
+        }
+
+        public int Locationid { get; set; }
+        public string City { get; set; }
+        public string Stateacronym { get; set; }
+
+        public virtual ICollection<Inventory> Inventory { get; set; }
+        public virtual ICollection<Orders> Orders { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/Orderitems.cs b/TeaStoreApp/TeaDB/Entities/Orderitems.cs
new file mode 100644
index 0000000..41b30e3
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/Orderitems.cs
@@ -0,0 +1,17 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class Orderitems
+    {
+        public int Orderitemsid { get; set; }
+        public int? Orderid { get; set; }
+        public int? Productid { get; set; }
+        public int? Amount { get; set; }
+        public decimal? Totalprice { get; set; }
+
+        public virtual Orders Order { get; set; }
+        public virtual Products Product { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/Orders.cs b/TeaStoreApp/TeaDB/Entities/Orders.cs
new file mode 100644
index 0000000..e271849
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/Orders.cs
@@ -0,0 +1,23 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class Orders
+    {
+        public Orders()
+        {
+            Orderitems = new HashSet<Orderitems>();
+        }
+
+        public int Orderid { get; set; }
+        public int? Customerid { get; set; }
+        public int? Locationid { get; set; }
+        public decimal? Totalprice { get; set; }
+        public bool? Payed { get; set; }
+
+        public virtual Customers Customer { get; set; }
+        public virtual Locations Location { get; set; }
+        public virtual ICollection<Orderitems> Orderitems { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/PgStatStatements.cs b/TeaStoreApp/TeaDB/Entities/PgStatStatements.cs
new file mode 100644
index 0000000..ded4518
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/PgStatStatements.cs
@@ -0,0 +1,32 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class PgStatStatements
+    {
+        public uint? Userid { get; set; }
+        public uint? Dbid { get; set; }
+        public long? Queryid { get; set; }
+        public string Query { get; set; }
+        public long? Calls { get; set; }
+        public double? TotalTime { get; set; }
+        public double? MinTime { get; set; }
+        public double? MaxTime { get; set; }
+        public double? MeanTime { get; set; }
+        public double? StddevTime { get; set; }
+        public long? Rows { get; set; }
+        public long? SharedBlksHit { get; set; }
+        public long? SharedBlksRead { get; set; }
+        public long? SharedBlksDirtied { get; set; }
+        public long? SharedBlksWritten { get; set; }
+        public long? LocalBlksHit { get; set; }
+        public long? LocalBlksRead { get; set; }
+        public long? LocalBlksDirtied { get; set; }
+        public long? LocalBlksWritten { get; set; }
+        public long? TempBlksRead { get; set; }
+        public long? TempBlksWritten { get; set; }
+        public double? BlkReadTime { get; set; }
+        public double? BlkWriteTime { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/Products.cs b/TeaStoreApp/TeaDB/Entities/Products.cs
new file mode 100644
index 0000000..f6298f7
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/Products.cs
@@ -0,0 +1,23 @@
+ï»¿using System;
+using System.Collections.Generic;
+
+namespace TeaDB.Entities
+{
+    public partial class Products
+    {
+        public Products()
+        {
+            Inventory = new HashSet<Inventory>();
+            Orderitems = new HashSet<Orderitems>();
+        }
+
+        public int Productid { get; set; }
+        public string Productname { get; set; }
+        public int? Numberofteabags { get; set; }
+        public decimal? Price { get; set; }
+        public string Description { get; set; }
+
+        public virtual ICollection<Inventory> Inventory { get; set; }
+        public virtual ICollection<Orderitems> Orderitems { get; set; }
+    }
+}
diff --git a/TeaStoreApp/TeaDB/Entities/TeaContext.cs b/TeaStoreApp/TeaDB/Entities/TeaContext.cs
new file mode 100644
index 0000000..730fefc
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Entities/TeaContext.cs
@@ -0,0 +1,278 @@
+ï»¿using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata;
+using System.IO;
+using Microsoft.Extensions.Configuration;
+
+namespace TeaDB.Entities
+{
+    public partial class TeaContext : DbContext
+    {
+        public TeaContext()
+        {
+        }
+
+        public TeaContext(DbContextOptions<TeaContext> options)
+            : base(options)
+        {
+        }
+
+        public virtual DbSet<Customers> Customers { get; set; }
+        public virtual DbSet<Inventory> Inventory { get; set; }
+        public virtual DbSet<Locations> Locations { get; set; }
+        public virtual DbSet<Orderitems> Orderitems { get; set; }
+        public virtual DbSet<Orders> Orders { get; set; }
+        public virtual DbSet<PgStatStatements> PgStatStatements { get; set; }
+        public virtual DbSet<Products> Products { get; set; }
+
+        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
+        {
+            if (!optionsBuilder.IsConfigured)
+            {
+                var configuration = new ConfigurationBuilder()
+                .SetBasePath(Directory.GetCurrentDirectory())
+                .AddJsonFile("appsettings.json")
+                .Build();
+
+                var connectionString = configuration.GetConnectionString("TeaDB");
+                optionsBuilder.UseNpgsql(connectionString);
+            }
+        }
+
+        protected override void OnModelCreating(ModelBuilder modelBuilder)
+        {
+            modelBuilder.HasPostgresExtension("btree_gin")
+                .HasPostgresExtension("btree_gist")
+                .HasPostgresExtension("citext")
+                .HasPostgresExtension("cube")
+                .HasPostgresExtension("dblink")
+                .HasPostgresExtension("dict_int")
+                .HasPostgresExtension("dict_xsyn")
+                .HasPostgresExtension("earthdistance")
+                .HasPostgresExtension("fuzzystrmatch")
+                .HasPostgresExtension("hstore")
+                .HasPostgresExtension("intarray")
+                .HasPostgresExtension("ltree")
+                .HasPostgresExtension("pg_stat_statements")
+                .HasPostgresExtension("pg_trgm")
+                .HasPostgresExtension("pgcrypto")
+                .HasPostgresExtension("pgrowlocks")
+                .HasPostgresExtension("pgstattuple")
+                .HasPostgresExtension("tablefunc")
+                .HasPostgresExtension("unaccent")
+                .HasPostgresExtension("uuid-ossp")
+                .HasPostgresExtension("xml2");
+
+            modelBuilder.Entity<Customers>(entity =>
+            {
+                entity.HasKey(e => e.Customerid)
+                    .HasName("customers_pkey");
+
+                entity.ToTable("customers");
+
+                entity.Property(e => e.Customerid).HasColumnName("customerid");
+
+                entity.Property(e => e.Customeremail)
+                    .HasColumnName("customeremail")
+                    .HasMaxLength(100);
+
+                entity.Property(e => e.Customerfirstname)
+                    .IsRequired()
+                    .HasColumnName("customerfirstname")
+                    .HasMaxLength(100);
+
+                entity.Property(e => e.Customerlastname)
+                    .IsRequired()
+                    .HasColumnName("customerlastname")
+                    .HasMaxLength(100);
+            });
+
+            modelBuilder.Entity<Inventory>(entity =>
+            {
+                entity.ToTable("inventory");
+
+                entity.Property(e => e.Id).HasColumnName("id");
+
+                entity.Property(e => e.Locationid).HasColumnName("locationid");
+
+                entity.Property(e => e.Productid).HasColumnName("productid");
+
+                entity.Property(e => e.Stock).HasColumnName("stock");
+
+                entity.HasOne(d => d.Location)
+                    .WithMany(p => p.Inventory)
+                    .HasForeignKey(d => d.Locationid)
+                    .HasConstraintName("inventory_locationid_fkey");
+
+                entity.HasOne(d => d.Product)
+                    .WithMany(p => p.Inventory)
+                    .HasForeignKey(d => d.Productid)
+                    .HasConstraintName("inventory_productid_fkey");
+            });
+
+            modelBuilder.Entity<Locations>(entity =>
+            {
+                entity.HasKey(e => e.Locationid)
+                    .HasName("locations_pkey");
+
+                entity.ToTable("locations");
+
+                entity.Property(e => e.Locationid).HasColumnName("locationid");
+
+                entity.Property(e => e.City)
+                    .HasColumnName("city")
+                    .HasMaxLength(20);
+
+                entity.Property(e => e.Stateacronym)
+                    .HasColumnName("stateacronym")
+                    .HasMaxLength(2);
+            });
+
+            modelBuilder.Entity<Orderitems>(entity =>
+            {
+                entity.ToTable("orderitems");
+
+                entity.Property(e => e.Orderitemsid).HasColumnName("orderitemsid");
+
+                entity.Property(e => e.Amount).HasColumnName("amount");
+
+                entity.Property(e => e.Orderid).HasColumnName("orderid");
+
+                entity.Property(e => e.Productid).HasColumnName("productid");
+
+                entity.Property(e => e.Totalprice)
+                    .HasColumnName("totalprice")
+                    .HasColumnType("numeric(10,2)");
+
+                entity.HasOne(d => d.Order)
+                    .WithMany(p => p.Orderitems)
+                    .HasForeignKey(d => d.Orderid)
+                    .HasConstraintName("orderitems_orderid_fkey");
+
+                entity.HasOne(d => d.Product)
+                    .WithMany(p => p.Orderitems)
+                    .HasForeignKey(d => d.Productid)
+                    .HasConstraintName("orderitems_productid_fkey");
+            });
+
+            modelBuilder.Entity<Orders>(entity =>
+            {
+                entity.HasKey(e => e.Orderid)
+                    .HasName("orders_pkey");
+
+                entity.ToTable("orders");
+
+                entity.Property(e => e.Orderid).HasColumnName("orderid");
+
+                entity.Property(e => e.Customerid).HasColumnName("customerid");
+
+                entity.Property(e => e.Locationid).HasColumnName("locationid");
+
+                entity.Property(e => e.Payed).HasColumnName("payed");
+
+                entity.Property(e => e.Totalprice)
+                    .HasColumnName("totalprice")
+                    .HasColumnType("numeric(10,2)");
+
+                entity.HasOne(d => d.Customer)
+                    .WithMany(p => p.Orders)
+                    .HasForeignKey(d => d.Customerid)
+                    .HasConstraintName("orders_customerid_fkey");
+
+                entity.HasOne(d => d.Location)
+                    .WithMany(p => p.Orders)
+                    .HasForeignKey(d => d.Locationid)
+                    .HasConstraintName("orders_locationid_fkey");
+            });
+
+            modelBuilder.Entity<PgStatStatements>(entity =>
+            {
+                entity.HasNoKey();
+
+                entity.ToTable("pg_stat_statements");
+
+                entity.Property(e => e.BlkReadTime).HasColumnName("blk_read_time");
+
+                entity.Property(e => e.BlkWriteTime).HasColumnName("blk_write_time");
+
+                entity.Property(e => e.Calls).HasColumnName("calls");
+
+                entity.Property(e => e.Dbid)
+                    .HasColumnName("dbid")
+                    .HasColumnType("oid");
+
+                entity.Property(e => e.LocalBlksDirtied).HasColumnName("local_blks_dirtied");
+
+                entity.Property(e => e.LocalBlksHit).HasColumnName("local_blks_hit");
+
+                entity.Property(e => e.LocalBlksRead).HasColumnName("local_blks_read");
+
+                entity.Property(e => e.LocalBlksWritten).HasColumnName("local_blks_written");
+
+                entity.Property(e => e.MaxTime).HasColumnName("max_time");
+
+                entity.Property(e => e.MeanTime).HasColumnName("mean_time");
+
+                entity.Property(e => e.MinTime).HasColumnName("min_time");
+
+                entity.Property(e => e.Query).HasColumnName("query");
+
+                entity.Property(e => e.Queryid).HasColumnName("queryid");
+
+                entity.Property(e => e.Rows).HasColumnName("rows");
+
+                entity.Property(e => e.SharedBlksDirtied).HasColumnName("shared_blks_dirtied");
+
+                entity.Property(e => e.SharedBlksHit).HasColumnName("shared_blks_hit");
+
+                entity.Property(e => e.SharedBlksRead).HasColumnName("shared_blks_read");
+
+                entity.Property(e => e.SharedBlksWritten).HasColumnName("shared_blks_written");
+
+                entity.Property(e => e.StddevTime).HasColumnName("stddev_time");
+
+                entity.Property(e => e.TempBlksRead).HasColumnName("temp_blks_read");
+
+                entity.Property(e => e.TempBlksWritten).HasColumnName("temp_blks_written");
+
+                entity.Property(e => e.TotalTime).HasColumnName("total_time");
+
+                entity.Property(e => e.Userid)
+                    .HasColumnName("userid")
+                    .HasColumnType("oid");
+            });
+
+            modelBuilder.Entity<Products>(entity =>
+            {
+                entity.HasKey(e => e.Productid)
+                    .HasName("products_pkey");
+
+                entity.ToTable("products");
+
+                entity.Property(e => e.Productid).HasColumnName("productid");
+
+                entity.Property(e => e.Description)
+                    .IsRequired()
+                    .HasColumnName("description")
+                    .HasMaxLength(250);
+
+                entity.Property(e => e.Numberofteabags).HasColumnName("numberofteabags");
+
+                entity.Property(e => e.Price)
+                    .HasColumnName("price")
+                    .HasColumnType("numeric(10,2)");
+
+                entity.Property(e => e.Productname)
+                    .IsRequired()
+                    .HasColumnName("productname")
+                    .HasMaxLength(20);
+            });
+
+            
+
+            OnModelCreatingPartial(modelBuilder);
+        }
+
+        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
+    }
+}
diff --git a/TeaStoreApp/TeaDB/IMappers/ICustomerMapper.cs b/TeaStoreApp/TeaDB/IMappers/ICustomerMapper.cs
new file mode 100644
index 0000000..2847fdb
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/ICustomerMapper.cs
@@ -0,0 +1,17 @@
+using TeaDB.Entities;
+using TeaDB.Models;
+using System.Collections.Generic;
+
+namespace TeaDB.IMappers
+{
+    /// <summary>
+    /// Mapping between Customer Model and Entities
+    /// </summary>
+    public interface ICustomerMapper
+    {
+        Customers ParseCustomer(CustomerModel customer);
+        ICollection<Customers> ParseCustomer(List<CustomerModel> customer);
+        CustomerModel ParseCustomer(Customers customers);
+        List<CustomerModel> ParseCustomer(ICollection<Customers> customers);
+    }
+}
diff --git a/TeaStoreApp/TeaDB/IMappers/IInventoryMapper.cs b/TeaStoreApp/TeaDB/IMappers/IInventoryMapper.cs
new file mode 100644
index 0000000..073832b
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/IInventoryMapper.cs
@@ -0,0 +1,17 @@
+using TeaDB.Entities;
+using TeaDB.Models;
+using System.Collections.Generic;
+
+namespace TeaDB.IMappers
+{
+    /// <summary>
+    /// Mapping between Inventory Model and Entities
+    /// </summary>
+    public interface IInventoryMapper
+    {
+        Inventory ParseInventory(InventoryModel inventory);
+        ICollection<Inventory> ParseInventory(List<InventoryModel> inventory);
+        InventoryModel ParseInventory(Inventory inventory);
+        List<InventoryModel> ParseInventory(ICollection<Inventory> inventory);
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IMappers/ILocationMapper.cs b/TeaStoreApp/TeaDB/IMappers/ILocationMapper.cs
new file mode 100644
index 0000000..d9e58fe
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/ILocationMapper.cs
@@ -0,0 +1,19 @@
+using TeaDB.Entities;
+using TeaDB.Models;
+using System.Collections.Generic;
+
+namespace TeaDB.IMappers
+{
+
+    /// <summary>
+    /// Mapping between Location Model and Entities
+    /// </summary>
+
+    public interface ILocationMapper
+    {
+        Locations ParseLocation(LocationModel location);
+        ICollection<Locations> ParseLocation(List<LocationModel> location);
+        LocationModel ParseLocation(Locations locations);
+        List<LocationModel> ParseLocation(ICollection<Locations> locations);
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IMappers/IMapper.cs b/TeaStoreApp/TeaDB/IMappers/IMapper.cs
new file mode 100644
index 0000000..1c20321
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/IMapper.cs
@@ -0,0 +1,7 @@
+namespace TeaDB.IMappers
+{
+    public interface IMapper: ICustomerMapper, IInventoryMapper, ILocationMapper, IOrderItemMapper, IOrderMapper, IProductMapper
+    {
+         
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IMappers/IOrderItemMapper.cs b/TeaStoreApp/TeaDB/IMappers/IOrderItemMapper.cs
new file mode 100644
index 0000000..41257b6
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/IOrderItemMapper.cs
@@ -0,0 +1,17 @@
+using TeaDB.Models;
+using TeaDB.Entities;
+using System.Collections.Generic;
+
+namespace TeaDB.IMappers
+{
+    /// <summary>
+    /// Mapping between Order Items Model and Entities
+    /// </summary>
+    public interface IOrderItemMapper
+    {
+        Orderitems ParseOrderItem(OrderItemModel orderItem);
+        ICollection<Orderitems> ParseOrderItem(List<OrderItemModel> orderItem);
+        OrderItemModel ParseOrderItem(Orderitems orderitems);
+        List<OrderItemModel> ParseOrderItem(ICollection<Orderitems> orderitems);
+    }
+}
diff --git a/TeaStoreApp/TeaDB/IMappers/IOrderMapper.cs b/TeaStoreApp/TeaDB/IMappers/IOrderMapper.cs
new file mode 100644
index 0000000..93951a6
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/IOrderMapper.cs
@@ -0,0 +1,18 @@
+using TeaDB.Entities;
+using TeaDB.Models;
+using System.Collections.Generic;
+
+namespace TeaDB.IMappers
+{
+    /// <summary>
+    /// Mapping between Order Model and Entities
+    /// </summary>
+
+    public interface IOrderMapper
+    {
+        Orders ParseOrder(OrderModel order);
+        ICollection<Orders> ParseOrder(List<OrderModel> order);
+        OrderModel ParseOrder(Orders orders);
+        List<OrderModel> ParseOrder(ICollection<Orders> orders);
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IMappers/IProductMapper.cs b/TeaStoreApp/TeaDB/IMappers/IProductMapper.cs
new file mode 100644
index 0000000..0e47b1e
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IMappers/IProductMapper.cs
@@ -0,0 +1,16 @@
+using TeaDB.Entities;
+using TeaDB.Models;
+using System.Collections.Generic;
+namespace TeaDB.IMappers
+{
+    /// <summary>
+    /// Mapping between Product Model and Entities
+    /// </summary>
+    public interface IProductMapper
+    {
+        Products ParseProduct(ProductModel product);
+        ICollection<Products> ParseProduct(List<ProductModel> product);
+        ProductModel ParseProduct(Products products);
+        List<ProductModel> ParseProduct(ICollection<Products> products);
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IRepo/ILocationRepo.cs b/TeaStoreApp/TeaDB/IRepo/ILocationRepo.cs
new file mode 100644
index 0000000..a4e6f87
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IRepo/ILocationRepo.cs
@@ -0,0 +1,14 @@
+using System.Collections.Generic;
+using TeaDB.Models;
+
+namespace TeaDB.IRepo
+{
+    /// <summary>
+    /// Business Logic Concerning Loccations
+    /// </summary>
+    public interface ILocationRepo
+    {
+        LocationModel GetLocation(int id);
+        List<InventoryModel> GetLocationInventory(int id);
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IRepo/IMainMenuRepo.cs b/TeaStoreApp/TeaDB/IRepo/IMainMenuRepo.cs
new file mode 100644
index 0000000..8e86600
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IRepo/IMainMenuRepo.cs
@@ -0,0 +1,12 @@
+using TeaDB.Models;
+namespace TeaDB.IRepo
+{
+    public interface IMainMenuRepo
+    {
+        /// <summary>
+        /// Business Logic concerning our MainMenu 
+        /// </summary>
+        void NewCustomerAsync(CustomerModel customer);
+        CustomerModel GetCustomerInfo(string email);        
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IRepo/IManagerRepo.cs b/TeaStoreApp/TeaDB/IRepo/IManagerRepo.cs
new file mode 100644
index 0000000..a87655c
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IRepo/IManagerRepo.cs
@@ -0,0 +1,17 @@
+using TeaDB.Models;
+using System.Collections.Generic;
+
+namespace TeaDB.IRepo
+{
+    /// <summary>
+    /// Business Logic for Manager tasks
+    /// </summary>
+    public interface IManagerRepo
+    {
+         void ReplenishStock(int locationid, int productid, int amount);
+        List<OrderModel> GetOrderHistoryLocationByMostExpensive(int locationid);
+        List<OrderModel> GetOrderHistoryLocationByLeastExpensive(int locationid);
+        List<OrderModel> GetLocationOrderHistory(int id);
+         
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/IRepo/IOrderRepo.cs b/TeaStoreApp/TeaDB/IRepo/IOrderRepo.cs
new file mode 100644
index 0000000..6b6e8d0
--- /dev/null
+++ b/TeaStoreApp/TeaDB/IRepo/IOrderRepo.cs
@@ -0,0 +1,28 @@
+using TeaDB.Models;
+using System.Collections.Generic;
+
+namespace TeaDB.IRepo
+{
+    /// <summary>
+    /// Business Logic concerning orders
+    /// </summary>
+    public interface IOrderRepo
+    {
+        void NewOrder(OrderModel order);
+        void DeleteOrder(int orderid);
+        void AddProductToOrderItem(OrderItemModel order);
+        void DeleteProductFromOrderItem(int orderid, int productid);
+        List<OrderItemModel> GetItemsInBasket(int orderid);
+        ProductModel GetProduct(int productid);
+        void PlaceOrder(OrderModel order);
+        int GetOrderId(CustomerModel customerid, int locationId);
+        OrderModel GetCurrentOrder(int customerid, int locationid);
+        List<OrderItemModel> GetOrderItems(int orderid);
+        void ChangeOrderTotalPrice(int orderid, decimal amount);
+        void DecreaseStock(int locationid, int productid, int stock);
+        List<OrderModel> GetOrderHistory(CustomerModel customer);
+        List<OrderModel> GetOrderHistoryByMostExpensive(CustomerModel customer);
+        List<OrderModel> GetOrderHistoryByLeastExpensive(CustomerModel customer);
+        
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Models/CustomerModel.cs b/TeaStoreApp/TeaDB/Models/CustomerModel.cs
new file mode 100644
index 0000000..4507f28
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Models/CustomerModel.cs
@@ -0,0 +1,11 @@
+namespace TeaDB.Models
+{
+    public class CustomerModel
+    {
+        public int id{get;set;}
+        public string firstName{get;set;}
+        public string lastName{get;set;}
+        public string email{get;set;}
+
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Models/InventoryModel.cs b/TeaStoreApp/TeaDB/Models/InventoryModel.cs
new file mode 100644
index 0000000..85f6469
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Models/InventoryModel.cs
@@ -0,0 +1,11 @@
+namespace TeaDB.Models
+{
+    public class InventoryModel
+    {
+        public int id {get;set;}
+        public int locationId{get;set;}
+        public int productId{get;set;}
+        public int stock{get;set;}
+        
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Models/LocationModel.cs b/TeaStoreApp/TeaDB/Models/LocationModel.cs
new file mode 100644
index 0000000..159de68
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Models/LocationModel.cs
@@ -0,0 +1,9 @@
+namespace TeaDB.Models
+{
+    public class LocationModel
+    {
+        public int id{get;set;}
+        public string city{get;set;}
+        public string state{get;set;}
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Models/OrderItemModel.cs b/TeaStoreApp/TeaDB/Models/OrderItemModel.cs
new file mode 100644
index 0000000..2d41696
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Models/OrderItemModel.cs
@@ -0,0 +1,13 @@
+namespace TeaDB.Models
+{
+    public class OrderItemModel
+    {
+        public int orderItemId{get;set;}
+        public int itemsId{get;set;}
+        public int orderId{get;set;}
+        public int productId{get;set;}
+        public int amount{get;set;}
+        public decimal totalPrice{get;set;}
+
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Models/OrderModel.cs b/TeaStoreApp/TeaDB/Models/OrderModel.cs
new file mode 100644
index 0000000..2475c83
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Models/OrderModel.cs
@@ -0,0 +1,12 @@
+using System.Collections.Generic;
+namespace TeaDB.Models
+{
+    public class OrderModel
+    {
+        public int id{get;set;}
+        public int customerId{get;set;}
+        public int locationId{get;set;}
+        public decimal totalPrice {get;set;}
+        public bool complete{get;set;}
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaDB/Models/ProductModel.cs b/TeaStoreApp/TeaDB/Models/ProductModel.cs
new file mode 100644
index 0000000..e0feadd
--- /dev/null
+++ b/TeaStoreApp/TeaDB/Models/ProductModel.cs
@@ -0,0 +1,11 @@
+namespace TeaDB.Models
+{
+    public class ProductModel
+    {
+        public int id{get;set;}
+        public string name{get;set;}
+        public int numberOfTeaBags{get;set;}
+        public decimal price{get;set;}
+        public string description{get;set;}
+    }
+}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesDB/SoilMatesDB.csproj b/TeaStoreApp/TeaDB/TeaDB.csproj
similarity index 55%
rename from SoilMates/SoilMatesDB/SoilMatesDB.csproj
rename to TeaStoreApp/TeaDB/TeaDB.csproj
index 72a5825..9523096 100644
--- a/SoilMates/SoilMatesDB/SoilMatesDB.csproj
+++ b/TeaStoreApp/TeaDB/TeaDB.csproj
@@ -1,22 +1,20 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
-  <PropertyGroup>
-    <TargetFramework>netstandard2.0</TargetFramework>
-  </PropertyGroup>
-
-<ItemGroup>
+  <ItemGroup>
     <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="3.1.9">
-      <!-- <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
-      <PrivateAssets>all</PrivateAssets> -->
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
     </PackageReference>
     <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="3.1.9">
-      <!-- <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
-      <PrivateAssets>all</PrivateAssets> -->
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
     </PackageReference>
     <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="3.1.9" />
     <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="3.1.4" />
-    <PackageReference Include="Serilog" Version="2.10.0" />
-    <PackageReference Include="System.Text.Json" Version="4.7.2" />
   </ItemGroup>
 
+  <PropertyGroup>
+    <TargetFramework>netstandard2.0</TargetFramework>
+  </PropertyGroup>
+
 </Project>
diff --git a/TeaStoreApp/TeaLib/LocationService.cs b/TeaStoreApp/TeaLib/LocationService.cs
new file mode 100644
index 0000000..220d0a3
--- /dev/null
+++ b/TeaStoreApp/TeaLib/LocationService.cs
@@ -0,0 +1,26 @@
+using System.Collections.Generic;
+using System;
+using TeaDB;
+using TeaDB.Models;
+using TeaDB.IRepo;
+
+namespace TeaLib
+{
+    public class LocationService
+    {
+        private DBRepo repo;
+
+        public LocationService(){
+            this.repo = new DBRepo();
+        }
+
+        public LocationModel GetLocation(int id){
+            return repo.GetLocation(id);
+        }
+
+        public List<InventoryModel> GetLocationInventory(int x){
+            return repo.GetLocationInventory(x);
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaLib/MainMenuService.cs b/TeaStoreApp/TeaLib/MainMenuService.cs
new file mode 100644
index 0000000..d091b5f
--- /dev/null
+++ b/TeaStoreApp/TeaLib/MainMenuService.cs
@@ -0,0 +1,33 @@
+using System.Collections.Generic;
+using System;
+using TeaDB;
+using TeaDB.Models;
+using TeaDB.IRepo;
+
+namespace TeaLib
+{
+    
+    public class MainMenuService
+    {
+
+
+        private DBRepo repo;
+        public MainMenuService(){
+            this.repo = new DBRepo();
+        }
+
+        public void AddCustomer(CustomerModel customer){
+            
+            repo.NewCustomerAsync(customer);
+            System.Threading.Thread.Sleep(5);
+            
+        }
+
+        public CustomerModel GetCustomerInfo(string email){
+            return repo.GetCustomerInfo(email);
+        }
+
+    }
+ 
+    
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaLib/ManagerService.cs b/TeaStoreApp/TeaLib/ManagerService.cs
new file mode 100644
index 0000000..e21a6e1
--- /dev/null
+++ b/TeaStoreApp/TeaLib/ManagerService.cs
@@ -0,0 +1,36 @@
+using System.Collections.Generic;
+using System;
+using TeaDB;
+using TeaDB.Models;
+using TeaDB.IRepo;
+
+namespace TeaLib
+{
+    //public delegate void InventoryDel();
+
+    public class ManagerService
+    {
+
+        private DBRepo repo;
+        public ManagerService(){
+            this.repo = new DBRepo();
+        }
+
+        public void ReplenishStock(int locationid, int productid,int amount){
+            repo.ReplenishStock(locationid, productid, amount);
+        }
+
+        public List<OrderModel> GetOrderHistoryLocationByMostExpensive(int locationid){
+            return repo.GetOrderHistoryLocationByMostExpensive(locationid);
+
+        }
+        public List<OrderModel> GetOrderHistoryLocationByLeastExpensive(int locationid){
+            return repo.GetOrderHistoryLocationByLeastExpensive(locationid);
+        }
+
+        public List<OrderModel> GetLocationOrderHistory(int x){
+            return repo.GetLocationOrderHistory(x);
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaLib/OrderService.cs b/TeaStoreApp/TeaLib/OrderService.cs
new file mode 100644
index 0000000..672f730
--- /dev/null
+++ b/TeaStoreApp/TeaLib/OrderService.cs
@@ -0,0 +1,90 @@
+using System.Collections.Generic;
+using System;
+using TeaDB;
+using TeaDB.Models;
+using TeaDB.IRepo;
+
+namespace TeaLib
+{
+    public class OrderService
+    {
+        
+        private DBRepo repo;
+
+        public OrderService(){
+            this.repo = new DBRepo();
+        }
+
+
+        public void NewOrder(int customerId, int locationId, decimal price){
+            OrderModel order = new OrderModel(){
+                customerId = customerId,
+                locationId = locationId,
+                totalPrice = price
+            };
+            repo.NewOrder(order);
+        }
+
+        public void DeleteOrder(int orderid){
+            repo.DeleteOrder(orderid);
+        }
+
+        public void AddProductToOrderItem(int orderid, int productid, int amount, decimal price){
+            OrderItemModel order = new OrderItemModel(){
+                orderId = orderid,
+                productId = productid,
+                amount = amount,
+                totalPrice = price
+            };
+            repo.AddProductToOrderItem(order);
+        }
+
+        public void DeleteProductFromOrderItem(int orderid, int productid){
+            repo.DeleteProductFromOrderItem(orderid, productid);
+        }
+
+        public List<OrderItemModel> GetItemsInBasket(int orderid){
+            return repo.GetItemsInBasket(orderid);
+        }
+
+        public ProductModel GetProduct(int productid){
+            return repo.GetProduct(productid);
+        }
+
+        public void PlaceOrder(OrderModel order){
+            repo.PlaceOrder(order);
+        }
+
+        public int GetOrderId(CustomerModel customer, int locationId){
+            return repo.GetOrderId(customer,locationId);
+        }
+
+        public OrderModel GetCurrentOrder(int customerId, int locationId){
+            return repo.GetCurrentOrder(customerId,locationId);
+        }
+
+        public List<OrderItemModel> GetOrderItems(int orderid){
+            return repo.GetOrderItems(orderid);
+        }
+
+        public void ChangeOrderTotalPrice(int orderid, decimal amount){
+            repo.ChangeOrderTotalPrice(orderid,amount);
+        }
+
+        public void DecreaseStock(int locationid, int productid, int stock){
+            repo.DecreaseStock(locationid, productid, stock);
+        }
+        
+        public List<OrderModel> GetOrderHistory(CustomerModel customer){
+            return repo.GetOrderHistory(customer);
+        }
+
+        public List<OrderModel> GetOrderHistoryByLeastExpensive(CustomerModel customer){
+            return repo.GetOrderHistoryByLeastExpensive(customer);
+        }
+
+        public List<OrderModel> GetOrderHistoryByMostExpensive(CustomerModel customer){
+            return repo.GetOrderHistoryByMostExpensive(customer);
+        }
+    }
+}
\ No newline at end of file
diff --git a/SoilMates/SoilMatesBL/SoilMatesBL.csproj b/TeaStoreApp/TeaLib/TeaLib.csproj
similarity index 70%
rename from SoilMates/SoilMatesBL/SoilMatesBL.csproj
rename to TeaStoreApp/TeaLib/TeaLib.csproj
index 72311ae..a42c983 100644
--- a/SoilMates/SoilMatesBL/SoilMatesBL.csproj
+++ b/TeaStoreApp/TeaLib/TeaLib.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <ItemGroup>
-    <ProjectReference Include="..\SoilMatesLib\SoilMatesLib.csproj" />
+    <ProjectReference Include="..\TeaDB\TeaDB.csproj" />
   </ItemGroup>
 
   <PropertyGroup>
diff --git a/TeaStoreApp/TeaStoreApp.sln b/TeaStoreApp/TeaStoreApp.sln
new file mode 100644
index 0000000..83a8f0c
--- /dev/null
+++ b/TeaStoreApp/TeaStoreApp.sln
@@ -0,0 +1,88 @@
+ï»¿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.26124.0
+MinimumVisualStudioVersion = 15.0.26124.0
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TeaDB", "TeaDB\TeaDB.csproj", "{D2782F82-17EE-42D1-936A-76D962A7A49F}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TeaLib", "TeaLib\TeaLib.csproj", "{18733D0D-8E91-4091-8406-CA21CA40E11D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TeaUI", "TeaUI\TeaUI.csproj", "{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TeaTest", "TeaTest\TeaTest.csproj", "{A8053176-DD69-4B36-BB87-3292E623397F}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Debug|x64 = Debug|x64
+		Debug|x86 = Debug|x86
+		Release|Any CPU = Release|Any CPU
+		Release|x64 = Release|x64
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Debug|x64.Build.0 = Debug|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Debug|x86.Build.0 = Debug|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Release|Any CPU.Build.0 = Release|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Release|x64.ActiveCfg = Release|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Release|x64.Build.0 = Release|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Release|x86.ActiveCfg = Release|Any CPU
+		{980FC3D8-5ADD-4BA6-8CA9-9A2680E6D712}.Release|x86.Build.0 = Release|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Debug|x64.Build.0 = Debug|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Debug|x86.Build.0 = Debug|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Release|x64.ActiveCfg = Release|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Release|x64.Build.0 = Release|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Release|x86.ActiveCfg = Release|Any CPU
+		{D2782F82-17EE-42D1-936A-76D962A7A49F}.Release|x86.Build.0 = Release|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Debug|x64.Build.0 = Debug|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Debug|x86.Build.0 = Debug|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Release|x64.ActiveCfg = Release|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Release|x64.Build.0 = Release|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Release|x86.ActiveCfg = Release|Any CPU
+		{18733D0D-8E91-4091-8406-CA21CA40E11D}.Release|x86.Build.0 = Release|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Debug|x64.Build.0 = Debug|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Debug|x86.Build.0 = Debug|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Release|Any CPU.Build.0 = Release|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Release|x64.ActiveCfg = Release|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Release|x64.Build.0 = Release|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Release|x86.ActiveCfg = Release|Any CPU
+		{BA7ADFAF-0FE9-44C4-855F-DB6FCD5723D3}.Release|x86.Build.0 = Release|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Debug|x64.Build.0 = Debug|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Debug|x86.Build.0 = Debug|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Release|x64.ActiveCfg = Release|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Release|x64.Build.0 = Release|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Release|x86.ActiveCfg = Release|Any CPU
+		{A8053176-DD69-4B36-BB87-3292E623397F}.Release|x86.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal
diff --git a/SoilMates/SoilMatesTest/SoilMatesTest.csproj b/TeaStoreApp/TeaTest/TeaTest.csproj
similarity index 50%
rename from SoilMates/SoilMatesTest/SoilMatesTest.csproj
rename to TeaStoreApp/TeaTest/TeaTest.csproj
index ed6aa01..b2286af 100644
--- a/SoilMates/SoilMatesTest/SoilMatesTest.csproj
+++ b/TeaStoreApp/TeaTest/TeaTest.csproj
@@ -7,15 +7,7 @@
   </PropertyGroup>
 
   <ItemGroup>
-    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="3.1.9">
-      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
-      <PrivateAssets>all</PrivateAssets>
-    </PackageReference>
     <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="3.1.9" />
-    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="3.1.9">
-      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
-      <PrivateAssets>all</PrivateAssets>
-    </PackageReference>
     <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.5.0" />
     <PackageReference Include="xunit" Version="2.4.0" />
     <PackageReference Include="xunit.runner.visualstudio" Version="2.4.0" />
@@ -23,7 +15,8 @@
   </ItemGroup>
 
   <ItemGroup>
-    <ProjectReference Include="..\SoilMatesDB\SoilMatesDB.csproj" />
+    <ProjectReference Include="..\TeaLib\TeaLib.csproj" />
+    <ProjectReference Include="..\TeaDB\TeaDB.csproj" />
   </ItemGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/TeaStoreApp/TeaTest/TeaTests.cs b/TeaStoreApp/TeaTest/TeaTests.cs
new file mode 100644
index 0000000..0429072
--- /dev/null
+++ b/TeaStoreApp/TeaTest/TeaTests.cs
@@ -0,0 +1,289 @@
+using System;
+using Xunit;
+using TeaDB;
+using TeaDB.Entities;
+using TeaDB.IMappers;
+using TeaDB.Models;
+using Microsoft.EntityFrameworkCore;
+using System.Linq;
+
+namespace TeaTest
+{
+    public class TeaTests
+    {
+        private readonly IMapper mapper = new DBMapper();
+        private DBRepo repo;
+
+        private readonly CustomerModel testCustomer = new CustomerModel(){
+            id = 1,
+            firstName = "Customer",
+            lastName = "Test",
+            email = "test@yahoo.com"
+        };
+
+        private readonly Customers testCustomer2 = new Customers(){
+            Customerid = 1,
+            Customerfirstname = "Customer",
+            Customerlastname = "Test",
+            Customeremail = "test@yahoo.com"
+        };
+
+        private readonly OrderModel testOrder = new OrderModel(){
+            customerId = 2,
+            locationId = 1,
+            totalPrice = Convert.ToDecimal(4.99),
+            complete = false
+        };
+
+        private readonly Orders testOrder2 = new Orders(){
+            Customerid = 1,
+            Locationid = 1,
+            Totalprice = Convert.ToDecimal(4.99),
+            Payed = false
+        };
+
+        private readonly OrderItemModel testOrderItem = new OrderItemModel(){
+            orderId = 1,
+            productId = 1,
+            amount = 1,
+            totalPrice = Convert.ToDecimal(5.99)
+        };
+
+        private readonly Orderitems testOrderItem2 = new Orderitems(){
+            Orderitemsid = 1,
+            Orderid = 1,
+            Productid = 1,
+            Amount = 1,
+            Totalprice = Convert.ToDecimal(5.99)
+        };
+
+        private readonly Products testProduct = new Products(){
+            Productid = 1,
+            Productname = "Test Tea",
+            Numberofteabags = 10,
+            Price = Convert.ToDecimal(5.99),
+            Description = "this is a test"
+        };
+
+        private readonly Locations testLocation = new Locations(){
+            Locationid = 1,
+            City = "tests",
+            Stateacronym = "TT"
+        };
+
+        private void Seed(TeaContext testcontext)
+        {
+            testcontext.Products.AddRange(testProduct);
+            testcontext.Customers.AddRange(testCustomer2);
+            testcontext.Locations.AddRange(testLocation);
+            testcontext.Orders.AddRange(testOrder2);
+            testcontext.Orderitems.AddRange(testOrderItem2);
+            testcontext.SaveChanges();
+        }
+
+        [Fact]
+        public void NewCustomerShouldAddCustomer()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("NewCustomerShouldAddCustomer").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            
+            //Act
+            repo.NewCustomerAsync (testCustomer);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.NotNull(assertContext.Customers.Single(h => h.Customeremail == testCustomer.email));
+        }
+
+
+
+
+
+
+        [Fact]
+        public void NewOrderShouldCreateNewOrder()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("NewOrderShouldCreateNewOrder").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            
+            //Act
+            repo.NewOrder(testOrder);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.NotNull(assertContext.Orders.Single(h => h.Customerid == testOrder.customerId && h.Locationid == testOrder.locationId ));
+        }
+
+        [Fact]
+        public void NewOrderItemShouldCreateNewOrderItem()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("NewOrderItemShouldCreateNewOrderItem").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            
+            //Act
+            repo.AddProductToOrderItem(testOrderItem);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.NotNull(assertContext.Orderitems.First(h => h.Orderid == testOrderItem.orderId));
+        }
+
+
+        [Fact]
+        public void GetProductShouldGetProduct()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("GetProductShouldGetProduct").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            var result = repo.GetProduct(1);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Equal(result.id, testProduct.Productid);
+        }
+
+
+
+        [Fact]
+        public void GetCustomerShouldGetCustomer()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("GetCustomerShouldGetCustomer").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            var result = repo.GetCustomerInfo(testCustomer2.Customeremail);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Equal(result.email, testCustomer2.Customeremail);
+        }
+       
+        [Fact]
+
+        public void GetLocationShouldGetLocation()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("GetLocationShouldGetLocation").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            var result = repo.GetLocation(1);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Equal(result.id, testLocation.Locationid);
+        }
+
+        [Fact]
+        public void GetCurrentOrderShouldGetCurrentOrder()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("GetCurrentOrderShouldGetCurrentOrder").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            var result = repo.GetCurrentOrder(1,1);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Equal(result.id, testOrder2.Orderid);
+        }
+
+
+
+        [Fact]
+        public void GetOrderIdShouldGetOrderId()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("GetOrderIdShouldGetOrderId").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            var result = repo.GetOrderId(testCustomer,1);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Equal(result, testCustomer.id);
+        }
+
+
+        [Fact]
+        public void GetItemsInBasketShouldGetItemsInBasket()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("GetItemsInBasketShouldGetItemsInBasket").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            var result = repo.GetItemsInBasket(1);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Equal(result.Count, 1);
+        }
+
+
+
+        [Fact]
+        public void DeleteOrderShouldDeleteOrder()
+        {
+            
+            var options = new DbContextOptionsBuilder<TeaContext>().UseInMemoryDatabase("DeleteItemShouldDeleteItem").Options;
+            using var testContext = new TeaContext(options);
+            repo = new DBRepo(){
+                context = testContext,
+                mapper = mapper
+            };
+            Seed(testContext);
+            //Act
+            repo.DeleteOrder(1);
+
+            //Assert
+            using var assertContext = new TeaContext(options);
+            Assert.Throws<InvalidOperationException>(() => assertContext.Orders.First(h => h.Orderid == 1));
+        }
+        
+    }
+}
diff --git a/TeaStoreApp/TeaTest/loggingfile.txt b/TeaStoreApp/TeaTest/loggingfile.txt
new file mode 100644
index 0000000..e69de29
diff --git a/TeaStoreApp/TeaUI/Menus/BasketMenu.cs b/TeaStoreApp/TeaUI/Menus/BasketMenu.cs
new file mode 100644
index 0000000..dd16233
--- /dev/null
+++ b/TeaStoreApp/TeaUI/Menus/BasketMenu.cs
@@ -0,0 +1,101 @@
+using System.Collections.Generic;
+using System;
+using TeaDB.Models;
+using TeaLib;
+using System.Linq;
+using Serilog;
+
+
+
+namespace TeaUI.Menus
+{
+    /// <summary>
+    /// Customer can remove items are place order
+    /// </summary>
+    public class BasketMenu
+    {
+        private  MainMenuService customerService;
+
+        private OrderService orderService;
+        private LocationService locationService;
+        public CustomerModel customer;
+        public LocationModel location;
+        public int orderid;
+
+        private List<OrderItemModel> products;
+
+        
+        public BasketMenu(CustomerModel customer, int locationid, int orderid){
+            this.locationService  = new LocationService();
+            this.orderService = new OrderService();
+            this.customerService = new MainMenuService();
+
+            this.customer = customer;
+            this.location = locationService.GetLocation(locationid);
+            this.orderid = orderid;
+            this.products = orderService.GetItemsInBasket(orderid);
+        }
+
+        public void Start(){
+
+            
+            
+            
+            string input;
+            do{
+
+                
+                Console.WriteLine("Your Basket");
+                System.Console.WriteLine("[ID] [Product Name] [Price] [Amount]");
+                foreach(var p in products){
+                    System.Console.WriteLine($"{p.productId} {orderService.GetProduct(p.productId).name} {orderService.GetProduct(p.productId).price} {p.amount}");
+                }
+
+                Options();
+                input = System.Console.ReadLine();
+                
+                switch(input){
+                    case "0":
+                        DeleteItem();
+                        break;
+                    case "1":
+                        OrderModel order = orderService.GetCurrentOrder(customer.id, location.id);
+                        orderService.PlaceOrder(order);
+                        System.Console.WriteLine("Your Order has been placed!");
+                        Log.Information($"Order Has been placed at {location.id}");
+                        break;
+                    case "2":
+                        System.Console.WriteLine("Go Back");
+                        break;
+                    default:
+                        System.Console.WriteLine("Please enter valid input");
+                        break;
+                }
+            }while(input!="2");
+        }
+        public void Options(){
+            System.Console.WriteLine("[0] Delete Item");
+            System.Console.WriteLine("[1] Place Order");
+            System.Console.WriteLine("[2] Go Back");
+        }
+
+        public void DeleteItem(){
+            
+            System.Console.WriteLine("Which Product ID would you like to remove from your Basket?");
+            int id = Convert.ToInt32(System.Console.ReadLine());
+            System.Console.WriteLine();
+            OrderItemModel item = products.First(o => o.productId == id);
+            products.Remove(item);
+            orderService.DeleteProductFromOrderItem(orderid, id);
+            decimal dec = (item.totalPrice) * (-1);
+            orderService.DecreaseStock(location.id, item.productId, (item.amount*-1));
+            if(!products.Any()){
+                System.Console.WriteLine("Basket is Empty");
+                orderService.DeleteOrder(orderid);
+            } else {
+                orderService.ChangeOrderTotalPrice(orderid, dec);
+            }
+            
+        }
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaUI/Menus/LocationMenu.cs b/TeaStoreApp/TeaUI/Menus/LocationMenu.cs
new file mode 100644
index 0000000..c5ffe68
--- /dev/null
+++ b/TeaStoreApp/TeaUI/Menus/LocationMenu.cs
@@ -0,0 +1,152 @@
+using System;
+using TeaDB.Models;
+using TeaLib;
+using System.Collections.Generic;
+namespace TeaUI.Menus
+{
+    public class LocationMenu
+    {
+        /// <summary>
+        /// Allow customer to browse location inventory, add to basket and look at past
+        /// </summary>
+        private string input;
+        private LocationModel location;
+        private CustomerModel customer;
+        private List<InventoryModel> inventory;
+        private OrderService orderService;
+        private LocationService locationService;
+
+        
+        public LocationMenu(int locationId, CustomerModel customer){
+            this.orderService = new OrderService();
+            this.locationService = new LocationService();
+
+            this.location = locationService.GetLocation(locationId);
+            this.customer = customer;
+            // this.inventory = locationService.GetLocationInventory(locationId);
+        }
+
+        public void Start(){
+            do{
+                Console.WriteLine($"Welcome to our {location.city} Location!");
+                
+                Options();
+                int orderid;
+                string sortByCost = @"[YyNn]";
+                string orderBy = @"[12]";
+                input = System.Console.ReadLine();
+                
+                switch(input){
+                    case "1":
+                        System.Console.WriteLine("Available Products are:");
+                        System.Console.WriteLine("[ProductID]  [Product Name] [Price] [Stock]");
+                        inventory = locationService.GetLocationInventory(location.id);
+                        foreach(var i in inventory){
+                            System.Console.WriteLine($"{i.productId} {orderService.GetProduct(i.productId).name} {orderService.GetProduct(i.productId).price} {i.stock}");
+
+                        }
+                        break;
+                    case "2":
+                        System.Console.WriteLine("Your past Purchases....");
+                        System.Console.WriteLine("Would you like to sort by cost? [Y/N]");
+                        sortByCost = System.Console.ReadLine();
+                        List<OrderModel> pastPurchases;
+                        if(sortByCost.ToLower() == "y"){
+                            System.Console.WriteLine("Would you like to sort: \n [1] Most to least Expensive \n [2] Least to Most Expensive \n Enter Number [1/2]:");
+                            orderBy = System.Console.ReadLine();
+                            if(orderBy == "1"){
+                                pastPurchases = orderService.GetOrderHistoryByMostExpensive(customer);
+                            } else {
+                                pastPurchases = orderService.GetOrderHistoryByLeastExpensive(customer);
+                            }
+                            
+                        } else {
+                            pastPurchases = orderService.GetOrderHistory(customer);
+                        }
+
+                        
+                        if(pastPurchases == null){
+                            System.Console.WriteLine("You have no past purchases");
+                        } else {
+                            foreach(var p in pastPurchases){
+                                System.Console.WriteLine($"OrderID: {p.id}");
+                                List<OrderItemModel> items = orderService.GetOrderItems(p.id);
+                                foreach(var i in items){
+                                    System.Console.WriteLine($"{location.city} {orderService.GetProduct(i.productId).name} {i.amount} {orderService.GetProduct(i.productId).price}");
+                                }
+                            }
+                         }
+                        break;
+                    case "3":
+                        System.Console.WriteLine("Adding to basket....");
+                        orderid = orderService.GetOrderId(customer,location.id);
+                        if(orderid == -1){
+                            NewOrder();
+                        } else {
+                            OldOrder(orderid);
+                        }                        
+                        break;
+                    case "4":
+                        System.Console.WriteLine("Viewing Basket....");
+                        orderid = orderService.GetOrderId(customer,location.id);
+                        if(orderid == -1){
+                            System.Console.WriteLine("Basket is empty");
+                        } else{
+                            BasketMenu basketMenu = new BasketMenu(customer, location.id, orderid);
+                            basketMenu.Start();
+                        }
+                        break;
+                    case "5":
+                        System.Console.WriteLine("Switching Location....");
+                        break;
+                    default:
+                        System.Console.WriteLine("Please enter a valid input");
+                        break;
+
+                }
+            }while(input!="5");
+        }
+        
+
+        public void Options(){
+            System.Console.WriteLine("[1] Look at Products");
+            System.Console.WriteLine("[2] Look at your past Purchases");
+            System.Console.WriteLine("[3] Add an item to Basket");
+            System.Console.WriteLine("[4] look at basket");
+            System.Console.WriteLine("[5] switch Location");
+        }
+
+        public void NewOrder(){
+            
+            System.Console.WriteLine("Enter Product id:");
+            int productId = Convert.ToInt32(System.Console.ReadLine());
+            ProductModel product = orderService.GetProduct(productId);
+            System.Console.WriteLine("Enter amount: ");
+            int amount = Convert.ToInt32(System.Console.ReadLine());
+        
+            orderService.NewOrder(customer.id, location.id, (product.price*amount));
+            int id = orderService.GetOrderId(customer, location.id);
+            orderService.AddProductToOrderItem(id, product.id, amount,(product.price*amount));
+        
+            orderService.DecreaseStock(location.id, product.id,amount);
+            
+            
+        }
+
+        public void OldOrder(int orderid){
+            System.Console.WriteLine(orderid);
+            System.Console.WriteLine("Enter Product id:");
+            int productId = Convert.ToInt32(System.Console.ReadLine());
+            ProductModel product = orderService.GetProduct(productId);
+            System.Console.WriteLine("Enter amount: ");
+            int amount = Convert.ToInt32(System.Console.ReadLine());
+        
+            OrderModel order = orderService.GetCurrentOrder(customer.id, location.id);
+            orderService.AddProductToOrderItem(orderid, product.id, amount,(product.price*amount));
+            orderService.ChangeOrderTotalPrice(orderid,  (product.price*amount));
+            orderService.DecreaseStock(location.id, product.id,amount);
+            
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaUI/Menus/MainMenu.cs b/TeaStoreApp/TeaUI/Menus/MainMenu.cs
new file mode 100644
index 0000000..06dacfe
--- /dev/null
+++ b/TeaStoreApp/TeaUI/Menus/MainMenu.cs
@@ -0,0 +1,163 @@
+using TeaDB.Models;
+using TeaLib;
+using System;
+using Serilog;
+
+namespace TeaUI.Menus
+{
+    /// <summary>
+    /// Allow new and returning customers to login with an email
+    /// </summary>
+
+    public class MainMenu
+    {
+        private int userInput;
+        private string email;
+
+        private CustomerModel customer;
+        private  MainMenuService customerService;
+        
+        public MainMenu(){
+            this.customerService = new MainMenuService();
+            email = @"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$";
+        }
+
+
+        public void Start(){
+
+            while(customer==null){
+                startMethod();
+            }
+
+            if(customer.email == "Manager123@gmail.com"){
+                
+                ManagerMenu managerMenu = new ManagerMenu();
+                
+                managerMenu.Start();
+            } else {
+                
+                System.Console.WriteLine($"Welcome {customer.firstName}!");
+                do{
+                    Options();
+                    userInput = Convert.ToInt32(System.Console.ReadLine());
+                    switch(userInput){
+                        case 0:
+                            LocationMenu locationMenu1 = new LocationMenu(1,customer);
+                            locationMenu1.Start();
+                            break;
+                        case 1:
+                            LocationMenu locationMenu2 = new LocationMenu(2,customer);
+                            locationMenu2.Start();
+                            break;
+                        case 2:
+                            LocationMenu locationMenu3 = new LocationMenu(3,customer);
+                            locationMenu3.Start();
+                            break;
+                        case 3:
+                            System.Console.WriteLine("GoodBye! Hope to see you again!");
+                            break;
+                        default:
+                            System.Console.WriteLine("Please enter valid input");
+                            break;
+                    }
+                } while(userInput!=3);
+            }
+        }
+
+
+        public CustomerModel NewCustomer(){
+            System.Console.WriteLine("Enter First Name: ");
+            string firstName = System.Console.ReadLine();
+
+            System.Console.WriteLine("Enter Last Name: ");
+            string lastName = System.Console.ReadLine();
+            
+            do{
+                try{
+                    System.Console.WriteLine("Enter email: ");
+                    email = System.Console.ReadLine();
+                    break;
+                } catch (InvalidOperationException){
+                    System.Console.WriteLine("Please enter a valid email");
+                    continue;
+                }
+            }while(true);
+            
+
+            CustomerModel customer = new CustomerModel(){
+                firstName = firstName,
+                lastName = lastName,
+                email = email
+            };
+
+            customerService.AddCustomer(customer);
+            customer = customerService.GetCustomerInfo(email);
+            return customer;
+        }
+
+
+
+        public CustomerModel OldCustomer(){
+            
+            do{
+                try{
+                    System.Console.WriteLine("Enter email: ");
+                    email = System.Console.ReadLine();
+                    break;
+                } catch (InvalidOperationException){
+                    System.Console.WriteLine("Please enter a valid email");
+                    continue;
+                }
+            }while(true);
+            
+            
+            CustomerModel customer = customerService.GetCustomerInfo(email);
+            return customer;
+            
+        }
+
+
+        public void startMethod(){
+            System.Console.WriteLine("Welcome to BesTea \n Your local Tea Store ");
+            string oldCustomer = @"[YyNn]{1}";
+            while(true){
+                try{
+                    System.Console.WriteLine("Are you a returning Customer? [Y/N]");
+                    
+                    oldCustomer = System.Console.ReadLine().ToLower();
+                    break;
+                    
+                } catch (InvalidOperationException){
+                    System.Console.WriteLine("Please enter a valid input");
+                }
+            }
+           
+            if(oldCustomer == "n"){
+                customer = NewCustomer();
+                Log.Information($"New Customer {customer.email} has been Added");
+                           
+            } else {                        
+                customer = OldCustomer();    
+            }
+                
+                
+        }
+
+
+
+        
+        
+
+
+
+        public void Options(){
+            System.Console.WriteLine("[0] Would You like to go to our Albany, NY Location?");
+            System.Console.WriteLine("[1] Would You like to go to our Buffalo, NY Location?");
+            System.Console.WriteLine("[2] Would You like to go to our Syracuse, NY Location?");
+            System.Console.WriteLine("[3] Would You like to leave?");
+
+        }
+        
+        
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaUI/Menus/ManagerMenu.cs b/TeaStoreApp/TeaUI/Menus/ManagerMenu.cs
new file mode 100644
index 0000000..f6cbc69
--- /dev/null
+++ b/TeaStoreApp/TeaUI/Menus/ManagerMenu.cs
@@ -0,0 +1,81 @@
+using System;
+using TeaDB.Models;
+using TeaLib;
+using System.Collections.Generic;
+using Serilog;
+
+namespace TeaUI.Menus
+{
+    public class ManagerMenu
+    {
+        /// <summary>
+        /// Manager can replenish stock and look at order histories per location
+        /// </summary>
+
+        private LocationService locationService;
+        private ManagerService managerService;
+        private OrderService orderService;
+
+        public ManagerMenu(){
+            this.locationService = new LocationService();
+            this.managerService = new ManagerService();
+            this.orderService = new OrderService();
+        }
+
+        public void Start(){
+
+            System.Console.WriteLine("Welcome Back Ma'am");
+            int input;
+            while(true){
+                System.Console.WriteLine("Which store Inventory would you like to view? [1/2/3] \n Press 0 to exit");
+                input = Convert.ToInt32(System.Console.ReadLine());
+                if(input == 0){
+                    break;
+                }
+                List<InventoryModel> invetory = locationService.GetLocationInventory(input);
+                foreach(var i in invetory){
+                    System.Console.WriteLine($"{i.productId} {orderService.GetProduct(i.productId).name} {orderService.GetProduct(i.productId).price} {i.stock}");
+                }
+                System.Console.WriteLine("Would you like to restock? [Y/N]" );
+                string restock = System.Console.ReadLine();
+                if(restock.ToLower() == "y"){
+                    System.Console.WriteLine("Enter Product id");
+                    int productid = Convert.ToInt32(System.Console.ReadLine());
+                    System.Console.WriteLine("Enter amount: ");
+                    int amount = Convert.ToInt32(System.Console.ReadLine());
+                    managerService.ReplenishStock(input, productid, amount);
+                    Log.Information($"Added {amount} to {productid} at location {input}");
+                    invetory = locationService.GetLocationInventory(input);
+                }
+
+                System.Console.WriteLine("Would you like to look at order History? [Y/N]" );
+                string orderHistory = System.Console.ReadLine();
+                if(orderHistory.ToLower() =="y"){
+                    
+                    List<OrderModel> pastPurchases;
+                    System.Console.WriteLine("Would you like to sort: \n [1] Least to Most Expensive \n [2] Most to least Expensive \n Enter Number [1/2]:");
+                    string orderBy = System.Console.ReadLine();
+                    if(orderBy == "1"){
+                        pastPurchases = managerService.GetOrderHistoryLocationByMostExpensive(input);
+                    } else {
+                        pastPurchases = managerService.GetOrderHistoryLocationByLeastExpensive(input);
+                    }
+
+                    if(pastPurchases == null){
+                            System.Console.WriteLine("There have been no purchases from this location");
+                        } else {
+                            foreach(var p in pastPurchases){
+                                System.Console.WriteLine($"OrderID: {p.id}");
+                                List<OrderItemModel> items = orderService.GetOrderItems(p.id);
+                                foreach(var i in items){
+                                    System.Console.WriteLine($"{locationService.GetLocation(p.locationId).city } {orderService.GetProduct(i.productId).name} {i.amount} {i.totalPrice}");
+                                }
+                            }
+                         }
+
+                }
+            } 
+
+        }
+    }
+}
\ No newline at end of file
diff --git a/TeaStoreApp/TeaUI/Program.cs b/TeaStoreApp/TeaUI/Program.cs
new file mode 100644
index 0000000..a8c357c
--- /dev/null
+++ b/TeaStoreApp/TeaUI/Program.cs
@@ -0,0 +1,25 @@
+ï»¿using TeaUI.Menus;
+using Serilog;
+
+namespace TeaUI
+{
+    class Program
+    {
+        /// <summary>
+        /// P0 - Tea Store
+        /// Shalei Kumar
+        /// </summary>
+        /// <param name="args"></param>
+
+        static void Main(string[] args)
+        {
+            
+            Log.Logger = new LoggerConfiguration()
+            .WriteTo.File("loggingfile.txt")
+            .CreateLogger();
+
+            MainMenu start = new MainMenu();
+            start.Start();
+        }    
+    }
+}
diff --git a/SoilMates/SoilMatesUI/SoilMatesUI.csproj b/TeaStoreApp/TeaUI/TeaUI.csproj
similarity index 67%
rename from SoilMates/SoilMatesUI/SoilMatesUI.csproj
rename to TeaStoreApp/TeaUI/TeaUI.csproj
index ab9f2f6..3de8c38 100644
--- a/SoilMates/SoilMatesUI/SoilMatesUI.csproj
+++ b/TeaStoreApp/TeaUI/TeaUI.csproj
@@ -1,9 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <ItemGroup>
-    <ProjectReference Include="..\SoilMatesBL\SoilMatesBL.csproj" />
-    <ProjectReference Include="..\SoilMatesLib\SoilMatesLib.csproj" />
-    <ProjectReference Include="..\SoilMatesDB\SoilMatesDB.csproj" />
+    <ProjectReference Include="..\TeaDB\TeaDB.csproj" />
+    <ProjectReference Include="..\TeaLib\TeaLib.csproj" />
   </ItemGroup>
 
   <ItemGroup>
@@ -11,12 +10,10 @@
       <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
       <PrivateAssets>all</PrivateAssets>
     </PackageReference>
-    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="3.1.9" />
     <PackageReference Include="Serilog" Version="2.10.0" />
     <PackageReference Include="Serilog.Sinks.File" Version="4.1.0" />
   </ItemGroup>
 
-
   <PropertyGroup>
     <OutputType>Exe</OutputType>
     <TargetFramework>netcoreapp3.1</TargetFramework>
diff --git a/TeaStoreApp/loggingfile.txt b/TeaStoreApp/loggingfile.txt
new file mode 100644
index 0000000..8b71e59
--- /dev/null
+++ b/TeaStoreApp/loggingfile.txt
@@ -0,0 +1,16 @@
+2020-11-03 15:06:44.249 -05:00 [INF] Order Has been placed at 3
+2020-11-03 15:28:50.206 -05:00 [INF] Order Has been placed at 1
+2020-11-03 16:40:21.060 -05:00 [INF] Order Has been placed at 2
+2020-11-03 16:52:19.145 -05:00 [INF] Order Has been placed at 3
+2020-11-03 19:30:59.530 -05:00 [INF] Order Has been placed at 1
+2020-11-03 21:58:29.038 -05:00 [INF] New Customer has been Added
+2020-11-03 22:02:19.800 -05:00 [INF] New Customer has been Added
+2020-11-03 22:06:22.189 -05:00 [INF] New Customer has been Added
+2020-11-03 22:16:07.290 -05:00 [INF] Order Has been placed at 1
+2020-11-03 22:16:13.262 -05:00 [INF] Order Has been placed at 1
+2020-11-03 22:16:43.458 -05:00 [INF] Order Has been placed at 3
+2020-11-03 22:23:27.731 -05:00 [INF] New Customer has been Added
+2020-11-03 22:24:08.763 -05:00 [INF] Order Has been placed at 1
+2020-11-03 22:25:09.983 -05:00 [INF] Order Has been placed at 2
+2020-11-04 08:19:09.739 -05:00 [INF] Order Has been placed at 3
+2020-11-04 08:25:04.746 -05:00 [INF] Added 5 to 15 at location 1
